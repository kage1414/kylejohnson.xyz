// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kylejohnson-xyz/ent/experience"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Experience is the model entity for the Experience schema.
type Experience struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Employer holds the value of the "employer" field.
	Employer string `json:"employer,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int32 `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExperienceQuery when eager-loading is set.
	Edges        ExperienceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExperienceEdges holds the relations/edges for other nodes in the graph.
type ExperienceEdges struct {
	// Descriptions holds the value of the descriptions edge.
	Descriptions []*Description `json:"descriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DescriptionsOrErr returns the Descriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ExperienceEdges) DescriptionsOrErr() ([]*Description, error) {
	if e.loadedTypes[0] {
		return e.Descriptions, nil
	}
	return nil, &NotLoadedError{edge: "descriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Experience) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case experience.FieldActive:
			values[i] = new(sql.NullBool)
		case experience.FieldID, experience.FieldPriority:
			values[i] = new(sql.NullInt64)
		case experience.FieldEmployer, experience.FieldPosition, experience.FieldTime:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Experience fields.
func (e *Experience) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case experience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case experience.FieldEmployer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field employer", values[i])
			} else if value.Valid {
				e.Employer = value.String
			}
		case experience.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				e.Position = value.String
			}
		case experience.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				e.Time = value.String
			}
		case experience.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				e.Active = value.Bool
			}
		case experience.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				e.Priority = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Experience.
// This includes values selected through modifiers, order, etc.
func (e *Experience) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryDescriptions queries the "descriptions" edge of the Experience entity.
func (e *Experience) QueryDescriptions() *DescriptionQuery {
	return NewExperienceClient(e.config).QueryDescriptions(e)
}

// Update returns a builder for updating this Experience.
// Note that you need to call Experience.Unwrap() before calling this method if this Experience
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Experience) Update() *ExperienceUpdateOne {
	return NewExperienceClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Experience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Experience) Unwrap() *Experience {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Experience is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Experience) String() string {
	var builder strings.Builder
	builder.WriteString("Experience(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("employer=")
	builder.WriteString(e.Employer)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(e.Position)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(e.Time)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", e.Active))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", e.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// Experiences is a parsable slice of Experience.
type Experiences []*Experience
