// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kylejohnson-xyz/ent/application"
	"kylejohnson-xyz/ent/description"
	"kylejohnson-xyz/ent/experience"
	"kylejohnson-xyz/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DescriptionQuery is the builder for querying Description entities.
type DescriptionQuery struct {
	config
	ctx             *QueryContext
	order           []description.OrderOption
	inters          []Interceptor
	predicates      []predicate.Description
	withExperience  *ExperienceQuery
	withApplication *ApplicationQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DescriptionQuery builder.
func (dq *DescriptionQuery) Where(ps ...predicate.Description) *DescriptionQuery {
	dq.predicates = append(dq.predicates, ps...)
	return dq
}

// Limit the number of records to be returned by this query.
func (dq *DescriptionQuery) Limit(limit int) *DescriptionQuery {
	dq.ctx.Limit = &limit
	return dq
}

// Offset to start from.
func (dq *DescriptionQuery) Offset(offset int) *DescriptionQuery {
	dq.ctx.Offset = &offset
	return dq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dq *DescriptionQuery) Unique(unique bool) *DescriptionQuery {
	dq.ctx.Unique = &unique
	return dq
}

// Order specifies how the records should be ordered.
func (dq *DescriptionQuery) Order(o ...description.OrderOption) *DescriptionQuery {
	dq.order = append(dq.order, o...)
	return dq
}

// QueryExperience chains the current query on the "experience" edge.
func (dq *DescriptionQuery) QueryExperience() *ExperienceQuery {
	query := (&ExperienceClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, selector),
			sqlgraph.To(experience.Table, experience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.ExperienceTable, description.ExperienceColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApplication chains the current query on the "application" edge.
func (dq *DescriptionQuery) QueryApplication() *ApplicationQuery {
	query := (&ApplicationClient{config: dq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.ApplicationTable, description.ApplicationColumn),
		)
		fromU = sqlgraph.SetNeighbors(dq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Description entity from the query.
// Returns a *NotFoundError when no Description was found.
func (dq *DescriptionQuery) First(ctx context.Context) (*Description, error) {
	nodes, err := dq.Limit(1).All(setContextOp(ctx, dq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{description.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dq *DescriptionQuery) FirstX(ctx context.Context) *Description {
	node, err := dq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Description ID from the query.
// Returns a *NotFoundError when no Description ID was found.
func (dq *DescriptionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dq.Limit(1).IDs(setContextOp(ctx, dq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{description.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dq *DescriptionQuery) FirstIDX(ctx context.Context) int {
	id, err := dq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Description entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Description entity is found.
// Returns a *NotFoundError when no Description entities are found.
func (dq *DescriptionQuery) Only(ctx context.Context) (*Description, error) {
	nodes, err := dq.Limit(2).All(setContextOp(ctx, dq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{description.Label}
	default:
		return nil, &NotSingularError{description.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dq *DescriptionQuery) OnlyX(ctx context.Context) *Description {
	node, err := dq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Description ID in the query.
// Returns a *NotSingularError when more than one Description ID is found.
// Returns a *NotFoundError when no entities are found.
func (dq *DescriptionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = dq.Limit(2).IDs(setContextOp(ctx, dq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{description.Label}
	default:
		err = &NotSingularError{description.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dq *DescriptionQuery) OnlyIDX(ctx context.Context) int {
	id, err := dq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Descriptions.
func (dq *DescriptionQuery) All(ctx context.Context) ([]*Description, error) {
	ctx = setContextOp(ctx, dq.ctx, "All")
	if err := dq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Description, *DescriptionQuery]()
	return withInterceptors[[]*Description](ctx, dq, qr, dq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dq *DescriptionQuery) AllX(ctx context.Context) []*Description {
	nodes, err := dq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Description IDs.
func (dq *DescriptionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if dq.ctx.Unique == nil && dq.path != nil {
		dq.Unique(true)
	}
	ctx = setContextOp(ctx, dq.ctx, "IDs")
	if err = dq.Select(description.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dq *DescriptionQuery) IDsX(ctx context.Context) []int {
	ids, err := dq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dq *DescriptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dq.ctx, "Count")
	if err := dq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dq, querierCount[*DescriptionQuery](), dq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dq *DescriptionQuery) CountX(ctx context.Context) int {
	count, err := dq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dq *DescriptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dq.ctx, "Exist")
	switch _, err := dq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dq *DescriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := dq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DescriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dq *DescriptionQuery) Clone() *DescriptionQuery {
	if dq == nil {
		return nil
	}
	return &DescriptionQuery{
		config:          dq.config,
		ctx:             dq.ctx.Clone(),
		order:           append([]description.OrderOption{}, dq.order...),
		inters:          append([]Interceptor{}, dq.inters...),
		predicates:      append([]predicate.Description{}, dq.predicates...),
		withExperience:  dq.withExperience.Clone(),
		withApplication: dq.withApplication.Clone(),
		// clone intermediate query.
		sql:  dq.sql.Clone(),
		path: dq.path,
	}
}

// WithExperience tells the query-builder to eager-load the nodes that are connected to
// the "experience" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DescriptionQuery) WithExperience(opts ...func(*ExperienceQuery)) *DescriptionQuery {
	query := (&ExperienceClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withExperience = query
	return dq
}

// WithApplication tells the query-builder to eager-load the nodes that are connected to
// the "application" edge. The optional arguments are used to configure the query builder of the edge.
func (dq *DescriptionQuery) WithApplication(opts ...func(*ApplicationQuery)) *DescriptionQuery {
	query := (&ApplicationClient{config: dq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dq.withApplication = query
	return dq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Description.Query().
//		GroupBy(description.FieldDescription).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dq *DescriptionQuery) GroupBy(field string, fields ...string) *DescriptionGroupBy {
	dq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DescriptionGroupBy{build: dq}
	grbuild.flds = &dq.ctx.Fields
	grbuild.label = description.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.Description.Query().
//		Select(description.FieldDescription).
//		Scan(ctx, &v)
func (dq *DescriptionQuery) Select(fields ...string) *DescriptionSelect {
	dq.ctx.Fields = append(dq.ctx.Fields, fields...)
	sbuild := &DescriptionSelect{DescriptionQuery: dq}
	sbuild.label = description.Label
	sbuild.flds, sbuild.scan = &dq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DescriptionSelect configured with the given aggregations.
func (dq *DescriptionQuery) Aggregate(fns ...AggregateFunc) *DescriptionSelect {
	return dq.Select().Aggregate(fns...)
}

func (dq *DescriptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dq); err != nil {
				return err
			}
		}
	}
	for _, f := range dq.ctx.Fields {
		if !description.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dq.path != nil {
		prev, err := dq.path(ctx)
		if err != nil {
			return err
		}
		dq.sql = prev
	}
	return nil
}

func (dq *DescriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Description, error) {
	var (
		nodes       = []*Description{}
		withFKs     = dq.withFKs
		_spec       = dq.querySpec()
		loadedTypes = [2]bool{
			dq.withExperience != nil,
			dq.withApplication != nil,
		}
	)
	if dq.withExperience != nil || dq.withApplication != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, description.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Description).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Description{config: dq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dq.withExperience; query != nil {
		if err := dq.loadExperience(ctx, query, nodes, nil,
			func(n *Description, e *Experience) { n.Edges.Experience = e }); err != nil {
			return nil, err
		}
	}
	if query := dq.withApplication; query != nil {
		if err := dq.loadApplication(ctx, query, nodes, nil,
			func(n *Description, e *Application) { n.Edges.Application = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dq *DescriptionQuery) loadExperience(ctx context.Context, query *ExperienceQuery, nodes []*Description, init func(*Description), assign func(*Description, *Experience)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Description)
	for i := range nodes {
		if nodes[i].experience_descriptions == nil {
			continue
		}
		fk := *nodes[i].experience_descriptions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(experience.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "experience_descriptions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dq *DescriptionQuery) loadApplication(ctx context.Context, query *ApplicationQuery, nodes []*Description, init func(*Description), assign func(*Description, *Application)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Description)
	for i := range nodes {
		if nodes[i].application_descriptions == nil {
			continue
		}
		fk := *nodes[i].application_descriptions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(application.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "application_descriptions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dq *DescriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dq.querySpec()
	_spec.Node.Columns = dq.ctx.Fields
	if len(dq.ctx.Fields) > 0 {
		_spec.Unique = dq.ctx.Unique != nil && *dq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dq.driver, _spec)
}

func (dq *DescriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(description.Table, description.Columns, sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt))
	_spec.From = dq.sql
	if unique := dq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dq.path != nil {
		_spec.Unique = true
	}
	if fields := dq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, description.FieldID)
		for i := range fields {
			if fields[i] != description.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dq *DescriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dq.driver.Dialect())
	t1 := builder.Table(description.Table)
	columns := dq.ctx.Fields
	if len(columns) == 0 {
		columns = description.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dq.sql != nil {
		selector = dq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dq.ctx.Unique != nil && *dq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dq.predicates {
		p(selector)
	}
	for _, p := range dq.order {
		p(selector)
	}
	if offset := dq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DescriptionGroupBy is the group-by builder for Description entities.
type DescriptionGroupBy struct {
	selector
	build *DescriptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dgb *DescriptionGroupBy) Aggregate(fns ...AggregateFunc) *DescriptionGroupBy {
	dgb.fns = append(dgb.fns, fns...)
	return dgb
}

// Scan applies the selector query and scans the result into the given value.
func (dgb *DescriptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dgb.build.ctx, "GroupBy")
	if err := dgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DescriptionQuery, *DescriptionGroupBy](ctx, dgb.build, dgb, dgb.build.inters, v)
}

func (dgb *DescriptionGroupBy) sqlScan(ctx context.Context, root *DescriptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dgb.fns))
	for _, fn := range dgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dgb.flds)+len(dgb.fns))
		for _, f := range *dgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DescriptionSelect is the builder for selecting fields of Description entities.
type DescriptionSelect struct {
	*DescriptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ds *DescriptionSelect) Aggregate(fns ...AggregateFunc) *DescriptionSelect {
	ds.fns = append(ds.fns, fns...)
	return ds
}

// Scan applies the selector query and scans the result into the given value.
func (ds *DescriptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ds.ctx, "Select")
	if err := ds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DescriptionQuery, *DescriptionSelect](ctx, ds.DescriptionQuery, ds, ds.inters, v)
}

func (ds *DescriptionSelect) sqlScan(ctx context.Context, root *DescriptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ds.fns))
	for _, fn := range ds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
