// Code generated by ent, DO NOT EDIT.

package techstack

import (
	"kylejohnson-xyz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TechStack {
	return predicate.TechStack(sql.FieldLTE(FieldID, id))
}

// Stack applies equality check predicate on the "stack" field. It's identical to StackEQ.
func Stack(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldEQ(FieldStack, v))
}

// StackEQ applies the EQ predicate on the "stack" field.
func StackEQ(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldEQ(FieldStack, v))
}

// StackNEQ applies the NEQ predicate on the "stack" field.
func StackNEQ(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldNEQ(FieldStack, v))
}

// StackIn applies the In predicate on the "stack" field.
func StackIn(vs ...string) predicate.TechStack {
	return predicate.TechStack(sql.FieldIn(FieldStack, vs...))
}

// StackNotIn applies the NotIn predicate on the "stack" field.
func StackNotIn(vs ...string) predicate.TechStack {
	return predicate.TechStack(sql.FieldNotIn(FieldStack, vs...))
}

// StackGT applies the GT predicate on the "stack" field.
func StackGT(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldGT(FieldStack, v))
}

// StackGTE applies the GTE predicate on the "stack" field.
func StackGTE(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldGTE(FieldStack, v))
}

// StackLT applies the LT predicate on the "stack" field.
func StackLT(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldLT(FieldStack, v))
}

// StackLTE applies the LTE predicate on the "stack" field.
func StackLTE(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldLTE(FieldStack, v))
}

// StackContains applies the Contains predicate on the "stack" field.
func StackContains(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldContains(FieldStack, v))
}

// StackHasPrefix applies the HasPrefix predicate on the "stack" field.
func StackHasPrefix(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldHasPrefix(FieldStack, v))
}

// StackHasSuffix applies the HasSuffix predicate on the "stack" field.
func StackHasSuffix(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldHasSuffix(FieldStack, v))
}

// StackEqualFold applies the EqualFold predicate on the "stack" field.
func StackEqualFold(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldEqualFold(FieldStack, v))
}

// StackContainsFold applies the ContainsFold predicate on the "stack" field.
func StackContainsFold(v string) predicate.TechStack {
	return predicate.TechStack(sql.FieldContainsFold(FieldStack, v))
}

// HasTechnology applies the HasEdge predicate on the "technology" edge.
func HasTechnology() predicate.TechStack {
	return predicate.TechStack(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TechnologyTable, TechnologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechnologyWith applies the HasEdge predicate on the "technology" edge with a given conditions (other predicates).
func HasTechnologyWith(preds ...predicate.Technology) predicate.TechStack {
	return predicate.TechStack(func(s *sql.Selector) {
		step := newTechnologyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TechStack) predicate.TechStack {
	return predicate.TechStack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TechStack) predicate.TechStack {
	return predicate.TechStack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TechStack) predicate.TechStack {
	return predicate.TechStack(func(s *sql.Selector) {
		p(s.Not())
	})
}
