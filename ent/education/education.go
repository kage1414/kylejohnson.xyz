// Code generated by ent, DO NOT EDIT.

package education

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the education type in the database.
	Label = "education"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSchool holds the string denoting the school field in the database.
	FieldSchool = "school"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldCertificate holds the string denoting the certificate field in the database.
	FieldCertificate = "certificate"
	// FieldDegree holds the string denoting the degree field in the database.
	FieldDegree = "degree"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// Table holds the table name of the education in the database.
	Table = "educations"
)

// Columns holds all SQL columns for education fields.
var Columns = []string{
	FieldID,
	FieldSchool,
	FieldTime,
	FieldCertificate,
	FieldDegree,
	FieldActive,
	FieldPriority,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the Education queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySchool orders the results by the school field.
func BySchool(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchool, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByCertificate orders the results by the certificate field.
func ByCertificate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCertificate, opts...).ToFunc()
}

// ByDegree orders the results by the degree field.
func ByDegree(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegree, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}
