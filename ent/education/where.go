// Code generated by ent, DO NOT EDIT.

package education

import (
	"kylejohnson-xyz/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldID, id))
}

// School applies equality check predicate on the "school" field. It's identical to SchoolEQ.
func School(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldSchool, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldTime, v))
}

// Certificate applies equality check predicate on the "certificate" field. It's identical to CertificateEQ.
func Certificate(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCertificate, v))
}

// Degree applies equality check predicate on the "degree" field. It's identical to DegreeEQ.
func Degree(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegree, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldActive, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int32) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldPriority, v))
}

// SchoolEQ applies the EQ predicate on the "school" field.
func SchoolEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldSchool, v))
}

// SchoolNEQ applies the NEQ predicate on the "school" field.
func SchoolNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldSchool, v))
}

// SchoolIn applies the In predicate on the "school" field.
func SchoolIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldSchool, vs...))
}

// SchoolNotIn applies the NotIn predicate on the "school" field.
func SchoolNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldSchool, vs...))
}

// SchoolGT applies the GT predicate on the "school" field.
func SchoolGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldSchool, v))
}

// SchoolGTE applies the GTE predicate on the "school" field.
func SchoolGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldSchool, v))
}

// SchoolLT applies the LT predicate on the "school" field.
func SchoolLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldSchool, v))
}

// SchoolLTE applies the LTE predicate on the "school" field.
func SchoolLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldSchool, v))
}

// SchoolContains applies the Contains predicate on the "school" field.
func SchoolContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldSchool, v))
}

// SchoolHasPrefix applies the HasPrefix predicate on the "school" field.
func SchoolHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldSchool, v))
}

// SchoolHasSuffix applies the HasSuffix predicate on the "school" field.
func SchoolHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldSchool, v))
}

// SchoolEqualFold applies the EqualFold predicate on the "school" field.
func SchoolEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldSchool, v))
}

// SchoolContainsFold applies the ContainsFold predicate on the "school" field.
func SchoolContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldSchool, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldTime, v))
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldTime, v))
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldTime, v))
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldTime, v))
}

// TimeIsNil applies the IsNil predicate on the "time" field.
func TimeIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldTime))
}

// TimeNotNil applies the NotNil predicate on the "time" field.
func TimeNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldTime))
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldTime, v))
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldTime, v))
}

// CertificateEQ applies the EQ predicate on the "certificate" field.
func CertificateEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldCertificate, v))
}

// CertificateNEQ applies the NEQ predicate on the "certificate" field.
func CertificateNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldCertificate, v))
}

// CertificateIn applies the In predicate on the "certificate" field.
func CertificateIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldCertificate, vs...))
}

// CertificateNotIn applies the NotIn predicate on the "certificate" field.
func CertificateNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldCertificate, vs...))
}

// CertificateGT applies the GT predicate on the "certificate" field.
func CertificateGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldCertificate, v))
}

// CertificateGTE applies the GTE predicate on the "certificate" field.
func CertificateGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldCertificate, v))
}

// CertificateLT applies the LT predicate on the "certificate" field.
func CertificateLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldCertificate, v))
}

// CertificateLTE applies the LTE predicate on the "certificate" field.
func CertificateLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldCertificate, v))
}

// CertificateContains applies the Contains predicate on the "certificate" field.
func CertificateContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldCertificate, v))
}

// CertificateHasPrefix applies the HasPrefix predicate on the "certificate" field.
func CertificateHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldCertificate, v))
}

// CertificateHasSuffix applies the HasSuffix predicate on the "certificate" field.
func CertificateHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldCertificate, v))
}

// CertificateIsNil applies the IsNil predicate on the "certificate" field.
func CertificateIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldCertificate))
}

// CertificateNotNil applies the NotNil predicate on the "certificate" field.
func CertificateNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldCertificate))
}

// CertificateEqualFold applies the EqualFold predicate on the "certificate" field.
func CertificateEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldCertificate, v))
}

// CertificateContainsFold applies the ContainsFold predicate on the "certificate" field.
func CertificateContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldCertificate, v))
}

// DegreeEQ applies the EQ predicate on the "degree" field.
func DegreeEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldDegree, v))
}

// DegreeNEQ applies the NEQ predicate on the "degree" field.
func DegreeNEQ(v string) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldDegree, v))
}

// DegreeIn applies the In predicate on the "degree" field.
func DegreeIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldDegree, vs...))
}

// DegreeNotIn applies the NotIn predicate on the "degree" field.
func DegreeNotIn(vs ...string) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldDegree, vs...))
}

// DegreeGT applies the GT predicate on the "degree" field.
func DegreeGT(v string) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldDegree, v))
}

// DegreeGTE applies the GTE predicate on the "degree" field.
func DegreeGTE(v string) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldDegree, v))
}

// DegreeLT applies the LT predicate on the "degree" field.
func DegreeLT(v string) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldDegree, v))
}

// DegreeLTE applies the LTE predicate on the "degree" field.
func DegreeLTE(v string) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldDegree, v))
}

// DegreeContains applies the Contains predicate on the "degree" field.
func DegreeContains(v string) predicate.Education {
	return predicate.Education(sql.FieldContains(FieldDegree, v))
}

// DegreeHasPrefix applies the HasPrefix predicate on the "degree" field.
func DegreeHasPrefix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasPrefix(FieldDegree, v))
}

// DegreeHasSuffix applies the HasSuffix predicate on the "degree" field.
func DegreeHasSuffix(v string) predicate.Education {
	return predicate.Education(sql.FieldHasSuffix(FieldDegree, v))
}

// DegreeIsNil applies the IsNil predicate on the "degree" field.
func DegreeIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldDegree))
}

// DegreeNotNil applies the NotNil predicate on the "degree" field.
func DegreeNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldDegree))
}

// DegreeEqualFold applies the EqualFold predicate on the "degree" field.
func DegreeEqualFold(v string) predicate.Education {
	return predicate.Education(sql.FieldEqualFold(FieldDegree, v))
}

// DegreeContainsFold applies the ContainsFold predicate on the "degree" field.
func DegreeContainsFold(v string) predicate.Education {
	return predicate.Education(sql.FieldContainsFold(FieldDegree, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldActive, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int32) predicate.Education {
	return predicate.Education(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int32) predicate.Education {
	return predicate.Education(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int32) predicate.Education {
	return predicate.Education(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int32) predicate.Education {
	return predicate.Education(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int32) predicate.Education {
	return predicate.Education(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int32) predicate.Education {
	return predicate.Education(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int32) predicate.Education {
	return predicate.Education(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int32) predicate.Education {
	return predicate.Education(sql.FieldLTE(FieldPriority, v))
}

// PriorityIsNil applies the IsNil predicate on the "priority" field.
func PriorityIsNil() predicate.Education {
	return predicate.Education(sql.FieldIsNull(FieldPriority))
}

// PriorityNotNil applies the NotNil predicate on the "priority" field.
func PriorityNotNil() predicate.Education {
	return predicate.Education(sql.FieldNotNull(FieldPriority))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Education) predicate.Education {
	return predicate.Education(func(s *sql.Selector) {
		p(s.Not())
	})
}
