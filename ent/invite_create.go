// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/invite"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteCreate is the builder for creating a Invite entity.
type InviteCreate struct {
	config
	mutation *InviteMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (ic *InviteCreate) SetEmail(s string) *InviteCreate {
	ic.mutation.SetEmail(s)
	return ic
}

// SetKey sets the "key" field.
func (ic *InviteCreate) SetKey(s string) *InviteCreate {
	ic.mutation.SetKey(s)
	return ic
}

// SetRegistered sets the "registered" field.
func (ic *InviteCreate) SetRegistered(b bool) *InviteCreate {
	ic.mutation.SetRegistered(b)
	return ic
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (ic *InviteCreate) SetNillableRegistered(b *bool) *InviteCreate {
	if b != nil {
		ic.SetRegistered(*b)
	}
	return ic
}

// Mutation returns the InviteMutation object of the builder.
func (ic *InviteCreate) Mutation() *InviteMutation {
	return ic.mutation
}

// Save creates the Invite in the database.
func (ic *InviteCreate) Save(ctx context.Context) (*Invite, error) {
	ic.defaults()
	return withHooks[*Invite, InviteMutation](ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InviteCreate) SaveX(ctx context.Context) *Invite {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InviteCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InviteCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InviteCreate) defaults() {
	if _, ok := ic.mutation.Registered(); !ok {
		v := invite.DefaultRegistered
		ic.mutation.SetRegistered(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InviteCreate) check() error {
	if _, ok := ic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Invite.email"`)}
	}
	if _, ok := ic.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Invite.key"`)}
	}
	if _, ok := ic.mutation.Registered(); !ok {
		return &ValidationError{Name: "registered", err: errors.New(`ent: missing required field "Invite.registered"`)}
	}
	return nil
}

func (ic *InviteCreate) sqlSave(ctx context.Context) (*Invite, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InviteCreate) createSpec() (*Invite, *sqlgraph.CreateSpec) {
	var (
		_node = &Invite{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(invite.Table, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Email(); ok {
		_spec.SetField(invite.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ic.mutation.Key(); ok {
		_spec.SetField(invite.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := ic.mutation.Registered(); ok {
		_spec.SetField(invite.FieldRegistered, field.TypeBool, value)
		_node.Registered = value
	}
	return _node, _spec
}

// InviteCreateBulk is the builder for creating many Invite entities in bulk.
type InviteCreateBulk struct {
	config
	builders []*InviteCreate
}

// Save creates the Invite entities in the database.
func (icb *InviteCreateBulk) Save(ctx context.Context) ([]*Invite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Invite, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InviteCreateBulk) SaveX(ctx context.Context) []*Invite {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InviteCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InviteCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
