// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kylejohnson-xyz/ent/application"
	"kylejohnson-xyz/ent/predicate"
	"kylejohnson-xyz/ent/technology"
	"kylejohnson-xyz/ent/techstack"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TechnologyQuery is the builder for querying Technology entities.
type TechnologyQuery struct {
	config
	ctx             *QueryContext
	order           []technology.OrderOption
	inters          []Interceptor
	predicates      []predicate.Technology
	withApplication *ApplicationQuery
	withStack       *TechStackQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TechnologyQuery builder.
func (tq *TechnologyQuery) Where(ps ...predicate.Technology) *TechnologyQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TechnologyQuery) Limit(limit int) *TechnologyQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TechnologyQuery) Offset(offset int) *TechnologyQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TechnologyQuery) Unique(unique bool) *TechnologyQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TechnologyQuery) Order(o ...technology.OrderOption) *TechnologyQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryApplication chains the current query on the "application" edge.
func (tq *TechnologyQuery) QueryApplication() *ApplicationQuery {
	query := (&ApplicationClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, selector),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, technology.ApplicationTable, technology.ApplicationColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStack chains the current query on the "stack" edge.
func (tq *TechnologyQuery) QueryStack() *TechStackQuery {
	query := (&TechStackClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, selector),
			sqlgraph.To(techstack.Table, techstack.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, technology.StackTable, technology.StackColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Technology entity from the query.
// Returns a *NotFoundError when no Technology was found.
func (tq *TechnologyQuery) First(ctx context.Context) (*Technology, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{technology.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TechnologyQuery) FirstX(ctx context.Context) *Technology {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Technology ID from the query.
// Returns a *NotFoundError when no Technology ID was found.
func (tq *TechnologyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{technology.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TechnologyQuery) FirstIDX(ctx context.Context) int {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Technology entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Technology entity is found.
// Returns a *NotFoundError when no Technology entities are found.
func (tq *TechnologyQuery) Only(ctx context.Context) (*Technology, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{technology.Label}
	default:
		return nil, &NotSingularError{technology.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TechnologyQuery) OnlyX(ctx context.Context) *Technology {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Technology ID in the query.
// Returns a *NotSingularError when more than one Technology ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TechnologyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{technology.Label}
	default:
		err = &NotSingularError{technology.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TechnologyQuery) OnlyIDX(ctx context.Context) int {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Technologies.
func (tq *TechnologyQuery) All(ctx context.Context) ([]*Technology, error) {
	ctx = setContextOp(ctx, tq.ctx, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Technology, *TechnologyQuery]()
	return withInterceptors[[]*Technology](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TechnologyQuery) AllX(ctx context.Context) []*Technology {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Technology IDs.
func (tq *TechnologyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, "IDs")
	if err = tq.Select(technology.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TechnologyQuery) IDsX(ctx context.Context) []int {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TechnologyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TechnologyQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TechnologyQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TechnologyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TechnologyQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TechnologyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TechnologyQuery) Clone() *TechnologyQuery {
	if tq == nil {
		return nil
	}
	return &TechnologyQuery{
		config:          tq.config,
		ctx:             tq.ctx.Clone(),
		order:           append([]technology.OrderOption{}, tq.order...),
		inters:          append([]Interceptor{}, tq.inters...),
		predicates:      append([]predicate.Technology{}, tq.predicates...),
		withApplication: tq.withApplication.Clone(),
		withStack:       tq.withStack.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithApplication tells the query-builder to eager-load the nodes that are connected to
// the "application" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TechnologyQuery) WithApplication(opts ...func(*ApplicationQuery)) *TechnologyQuery {
	query := (&ApplicationClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withApplication = query
	return tq
}

// WithStack tells the query-builder to eager-load the nodes that are connected to
// the "stack" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TechnologyQuery) WithStack(opts ...func(*TechStackQuery)) *TechnologyQuery {
	query := (&TechStackClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withStack = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Technology.Query().
//		GroupBy(technology.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tq *TechnologyQuery) GroupBy(field string, fields ...string) *TechnologyGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TechnologyGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = technology.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Technology.Query().
//		Select(technology.FieldName).
//		Scan(ctx, &v)
//
func (tq *TechnologyQuery) Select(fields ...string) *TechnologySelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TechnologySelect{TechnologyQuery: tq}
	sbuild.label = technology.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TechnologySelect configured with the given aggregations.
func (tq *TechnologyQuery) Aggregate(fns ...AggregateFunc) *TechnologySelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TechnologyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !technology.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TechnologyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Technology, error) {
	var (
		nodes       = []*Technology{}
		withFKs     = tq.withFKs
		_spec       = tq.querySpec()
		loadedTypes = [2]bool{
			tq.withApplication != nil,
			tq.withStack != nil,
		}
	)
	if tq.withApplication != nil || tq.withStack != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, technology.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Technology).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Technology{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withApplication; query != nil {
		if err := tq.loadApplication(ctx, query, nodes, nil,
			func(n *Technology, e *Application) { n.Edges.Application = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withStack; query != nil {
		if err := tq.loadStack(ctx, query, nodes, nil,
			func(n *Technology, e *TechStack) { n.Edges.Stack = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TechnologyQuery) loadApplication(ctx context.Context, query *ApplicationQuery, nodes []*Technology, init func(*Technology), assign func(*Technology, *Application)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Technology)
	for i := range nodes {
		if nodes[i].application_technologies == nil {
			continue
		}
		fk := *nodes[i].application_technologies
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(application.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "application_technologies" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TechnologyQuery) loadStack(ctx context.Context, query *TechStackQuery, nodes []*Technology, init func(*Technology), assign func(*Technology, *TechStack)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Technology)
	for i := range nodes {
		if nodes[i].tech_stack_technology == nil {
			continue
		}
		fk := *nodes[i].tech_stack_technology
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(techstack.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tech_stack_technology" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tq *TechnologyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TechnologyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(technology.Table, technology.Columns, sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technology.FieldID)
		for i := range fields {
			if fields[i] != technology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TechnologyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(technology.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = technology.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TechnologyGroupBy is the group-by builder for Technology entities.
type TechnologyGroupBy struct {
	selector
	build *TechnologyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TechnologyGroupBy) Aggregate(fns ...AggregateFunc) *TechnologyGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TechnologyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TechnologyQuery, *TechnologyGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TechnologyGroupBy) sqlScan(ctx context.Context, root *TechnologyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TechnologySelect is the builder for selecting fields of Technology entities.
type TechnologySelect struct {
	*TechnologyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TechnologySelect) Aggregate(fns ...AggregateFunc) *TechnologySelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TechnologySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TechnologyQuery, *TechnologySelect](ctx, ts.TechnologyQuery, ts, ts.inters, v)
}

func (ts *TechnologySelect) sqlScan(ctx context.Context, root *TechnologyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
