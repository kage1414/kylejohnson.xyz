// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/application"
	"kylejohnson-xyz/ent/description"
	"kylejohnson-xyz/ent/experience"
	"kylejohnson-xyz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DescriptionUpdate is the builder for updating Description entities.
type DescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *DescriptionMutation
}

// Where appends a list predicates to the DescriptionUpdate builder.
func (du *DescriptionUpdate) Where(ps ...predicate.Description) *DescriptionUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDescription sets the "description" field.
func (du *DescriptionUpdate) SetDescription(s string) *DescriptionUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetActive sets the "active" field.
func (du *DescriptionUpdate) SetActive(b bool) *DescriptionUpdate {
	du.mutation.SetActive(b)
	return du
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (du *DescriptionUpdate) SetNillableActive(b *bool) *DescriptionUpdate {
	if b != nil {
		du.SetActive(*b)
	}
	return du
}

// SetExperienceID sets the "experience" edge to the Experience entity by ID.
func (du *DescriptionUpdate) SetExperienceID(id int) *DescriptionUpdate {
	du.mutation.SetExperienceID(id)
	return du
}

// SetNillableExperienceID sets the "experience" edge to the Experience entity by ID if the given value is not nil.
func (du *DescriptionUpdate) SetNillableExperienceID(id *int) *DescriptionUpdate {
	if id != nil {
		du = du.SetExperienceID(*id)
	}
	return du
}

// SetExperience sets the "experience" edge to the Experience entity.
func (du *DescriptionUpdate) SetExperience(e *Experience) *DescriptionUpdate {
	return du.SetExperienceID(e.ID)
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (du *DescriptionUpdate) SetApplicationID(id int) *DescriptionUpdate {
	du.mutation.SetApplicationID(id)
	return du
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (du *DescriptionUpdate) SetNillableApplicationID(id *int) *DescriptionUpdate {
	if id != nil {
		du = du.SetApplicationID(*id)
	}
	return du
}

// SetApplication sets the "application" edge to the Application entity.
func (du *DescriptionUpdate) SetApplication(a *Application) *DescriptionUpdate {
	return du.SetApplicationID(a.ID)
}

// Mutation returns the DescriptionMutation object of the builder.
func (du *DescriptionUpdate) Mutation() *DescriptionMutation {
	return du.mutation
}

// ClearExperience clears the "experience" edge to the Experience entity.
func (du *DescriptionUpdate) ClearExperience() *DescriptionUpdate {
	du.mutation.ClearExperience()
	return du
}

// ClearApplication clears the "application" edge to the Application entity.
func (du *DescriptionUpdate) ClearApplication() *DescriptionUpdate {
	du.mutation.ClearApplication()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DescriptionMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DescriptionUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DescriptionUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(description.Table, description.Columns, sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(description.FieldDescription, field.TypeString, value)
	}
	if value, ok := du.mutation.Active(); ok {
		_spec.SetField(description.FieldActive, field.TypeBool, value)
	}
	if du.mutation.ExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ExperienceTable,
			Columns: []string{description.ExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ExperienceTable,
			Columns: []string{description.ExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ApplicationTable,
			Columns: []string{description.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ApplicationTable,
			Columns: []string{description.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{description.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DescriptionUpdateOne is the builder for updating a single Description entity.
type DescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DescriptionMutation
}

// SetDescription sets the "description" field.
func (duo *DescriptionUpdateOne) SetDescription(s string) *DescriptionUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetActive sets the "active" field.
func (duo *DescriptionUpdateOne) SetActive(b bool) *DescriptionUpdateOne {
	duo.mutation.SetActive(b)
	return duo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (duo *DescriptionUpdateOne) SetNillableActive(b *bool) *DescriptionUpdateOne {
	if b != nil {
		duo.SetActive(*b)
	}
	return duo
}

// SetExperienceID sets the "experience" edge to the Experience entity by ID.
func (duo *DescriptionUpdateOne) SetExperienceID(id int) *DescriptionUpdateOne {
	duo.mutation.SetExperienceID(id)
	return duo
}

// SetNillableExperienceID sets the "experience" edge to the Experience entity by ID if the given value is not nil.
func (duo *DescriptionUpdateOne) SetNillableExperienceID(id *int) *DescriptionUpdateOne {
	if id != nil {
		duo = duo.SetExperienceID(*id)
	}
	return duo
}

// SetExperience sets the "experience" edge to the Experience entity.
func (duo *DescriptionUpdateOne) SetExperience(e *Experience) *DescriptionUpdateOne {
	return duo.SetExperienceID(e.ID)
}

// SetApplicationID sets the "application" edge to the Application entity by ID.
func (duo *DescriptionUpdateOne) SetApplicationID(id int) *DescriptionUpdateOne {
	duo.mutation.SetApplicationID(id)
	return duo
}

// SetNillableApplicationID sets the "application" edge to the Application entity by ID if the given value is not nil.
func (duo *DescriptionUpdateOne) SetNillableApplicationID(id *int) *DescriptionUpdateOne {
	if id != nil {
		duo = duo.SetApplicationID(*id)
	}
	return duo
}

// SetApplication sets the "application" edge to the Application entity.
func (duo *DescriptionUpdateOne) SetApplication(a *Application) *DescriptionUpdateOne {
	return duo.SetApplicationID(a.ID)
}

// Mutation returns the DescriptionMutation object of the builder.
func (duo *DescriptionUpdateOne) Mutation() *DescriptionMutation {
	return duo.mutation
}

// ClearExperience clears the "experience" edge to the Experience entity.
func (duo *DescriptionUpdateOne) ClearExperience() *DescriptionUpdateOne {
	duo.mutation.ClearExperience()
	return duo
}

// ClearApplication clears the "application" edge to the Application entity.
func (duo *DescriptionUpdateOne) ClearApplication() *DescriptionUpdateOne {
	duo.mutation.ClearApplication()
	return duo
}

// Where appends a list predicates to the DescriptionUpdate builder.
func (duo *DescriptionUpdateOne) Where(ps ...predicate.Description) *DescriptionUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DescriptionUpdateOne) Select(field string, fields ...string) *DescriptionUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Description entity.
func (duo *DescriptionUpdateOne) Save(ctx context.Context) (*Description, error) {
	return withHooks[*Description, DescriptionMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DescriptionUpdateOne) SaveX(ctx context.Context) *Description {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DescriptionUpdateOne) sqlSave(ctx context.Context) (_node *Description, err error) {
	_spec := sqlgraph.NewUpdateSpec(description.Table, description.Columns, sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Description.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, description.FieldID)
		for _, f := range fields {
			if !description.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != description.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(description.FieldDescription, field.TypeString, value)
	}
	if value, ok := duo.mutation.Active(); ok {
		_spec.SetField(description.FieldActive, field.TypeBool, value)
	}
	if duo.mutation.ExperienceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ExperienceTable,
			Columns: []string{description.ExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ExperienceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ExperienceTable,
			Columns: []string{description.ExperienceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ApplicationTable,
			Columns: []string{description.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   description.ApplicationTable,
			Columns: []string{description.ApplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Description{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{description.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
