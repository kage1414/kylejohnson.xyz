// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/application"
	"kylejohnson-xyz/ent/predicate"
	"kylejohnson-xyz/ent/technology"
	"kylejohnson-xyz/ent/techstack"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TechnologyUpdate is the builder for updating Technology entities.
type TechnologyUpdate struct {
	config
	hooks    []Hook
	mutation *TechnologyMutation
}

// Where appends a list predicates to the TechnologyUpdate builder.
func (tu *TechnologyUpdate) Where(ps ...predicate.Technology) *TechnologyUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TechnologyUpdate) SetName(s string) *TechnologyUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetURL sets the "url" field.
func (tu *TechnologyUpdate) SetURL(s string) *TechnologyUpdate {
	tu.mutation.SetURL(s)
	return tu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tu *TechnologyUpdate) SetNillableURL(s *string) *TechnologyUpdate {
	if s != nil {
		tu.SetURL(*s)
	}
	return tu
}

// ClearURL clears the value of the "url" field.
func (tu *TechnologyUpdate) ClearURL() *TechnologyUpdate {
	tu.mutation.ClearURL()
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TechnologyUpdate) SetPriority(i int32) *TechnologyUpdate {
	tu.mutation.ResetPriority()
	tu.mutation.SetPriority(i)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TechnologyUpdate) SetNillablePriority(i *int32) *TechnologyUpdate {
	if i != nil {
		tu.SetPriority(*i)
	}
	return tu
}

// AddPriority adds i to the "priority" field.
func (tu *TechnologyUpdate) AddPriority(i int32) *TechnologyUpdate {
	tu.mutation.AddPriority(i)
	return tu
}

// ClearPriority clears the value of the "priority" field.
func (tu *TechnologyUpdate) ClearPriority() *TechnologyUpdate {
	tu.mutation.ClearPriority()
	return tu
}

// AddApplicationIDs adds the "application" edge to the Application entity by IDs.
func (tu *TechnologyUpdate) AddApplicationIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.AddApplicationIDs(ids...)
	return tu
}

// AddApplication adds the "application" edges to the Application entity.
func (tu *TechnologyUpdate) AddApplication(a ...*Application) *TechnologyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddApplicationIDs(ids...)
}

// SetStackID sets the "stack" edge to the TechStack entity by ID.
func (tu *TechnologyUpdate) SetStackID(id int) *TechnologyUpdate {
	tu.mutation.SetStackID(id)
	return tu
}

// SetNillableStackID sets the "stack" edge to the TechStack entity by ID if the given value is not nil.
func (tu *TechnologyUpdate) SetNillableStackID(id *int) *TechnologyUpdate {
	if id != nil {
		tu = tu.SetStackID(*id)
	}
	return tu
}

// SetStack sets the "stack" edge to the TechStack entity.
func (tu *TechnologyUpdate) SetStack(t *TechStack) *TechnologyUpdate {
	return tu.SetStackID(t.ID)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tu *TechnologyUpdate) Mutation() *TechnologyMutation {
	return tu.mutation
}

// ClearApplication clears all "application" edges to the Application entity.
func (tu *TechnologyUpdate) ClearApplication() *TechnologyUpdate {
	tu.mutation.ClearApplication()
	return tu
}

// RemoveApplicationIDs removes the "application" edge to Application entities by IDs.
func (tu *TechnologyUpdate) RemoveApplicationIDs(ids ...int) *TechnologyUpdate {
	tu.mutation.RemoveApplicationIDs(ids...)
	return tu
}

// RemoveApplication removes "application" edges to Application entities.
func (tu *TechnologyUpdate) RemoveApplication(a ...*Application) *TechnologyUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveApplicationIDs(ids...)
}

// ClearStack clears the "stack" edge to the TechStack entity.
func (tu *TechnologyUpdate) ClearStack() *TechnologyUpdate {
	tu.mutation.ClearStack()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechnologyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TechnologyMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechnologyUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechnologyUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechnologyUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TechnologyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(technology.Table, technology.Columns, sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(technology.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.URL(); ok {
		_spec.SetField(technology.FieldURL, field.TypeString, value)
	}
	if tu.mutation.URLCleared() {
		_spec.ClearField(technology.FieldURL, field.TypeString)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(technology.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedPriority(); ok {
		_spec.AddField(technology.FieldPriority, field.TypeInt32, value)
	}
	if tu.mutation.PriorityCleared() {
		_spec.ClearField(technology.FieldPriority, field.TypeInt32)
	}
	if tu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedApplicationIDs(); len(nodes) > 0 && !tu.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   technology.StackTable,
			Columns: []string{technology.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   technology.StackTable,
			Columns: []string{technology.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TechnologyUpdateOne is the builder for updating a single Technology entity.
type TechnologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechnologyMutation
}

// SetName sets the "name" field.
func (tuo *TechnologyUpdateOne) SetName(s string) *TechnologyUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetURL sets the "url" field.
func (tuo *TechnologyUpdateOne) SetURL(s string) *TechnologyUpdateOne {
	tuo.mutation.SetURL(s)
	return tuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillableURL(s *string) *TechnologyUpdateOne {
	if s != nil {
		tuo.SetURL(*s)
	}
	return tuo
}

// ClearURL clears the value of the "url" field.
func (tuo *TechnologyUpdateOne) ClearURL() *TechnologyUpdateOne {
	tuo.mutation.ClearURL()
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TechnologyUpdateOne) SetPriority(i int32) *TechnologyUpdateOne {
	tuo.mutation.ResetPriority()
	tuo.mutation.SetPriority(i)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillablePriority(i *int32) *TechnologyUpdateOne {
	if i != nil {
		tuo.SetPriority(*i)
	}
	return tuo
}

// AddPriority adds i to the "priority" field.
func (tuo *TechnologyUpdateOne) AddPriority(i int32) *TechnologyUpdateOne {
	tuo.mutation.AddPriority(i)
	return tuo
}

// ClearPriority clears the value of the "priority" field.
func (tuo *TechnologyUpdateOne) ClearPriority() *TechnologyUpdateOne {
	tuo.mutation.ClearPriority()
	return tuo
}

// AddApplicationIDs adds the "application" edge to the Application entity by IDs.
func (tuo *TechnologyUpdateOne) AddApplicationIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.AddApplicationIDs(ids...)
	return tuo
}

// AddApplication adds the "application" edges to the Application entity.
func (tuo *TechnologyUpdateOne) AddApplication(a ...*Application) *TechnologyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddApplicationIDs(ids...)
}

// SetStackID sets the "stack" edge to the TechStack entity by ID.
func (tuo *TechnologyUpdateOne) SetStackID(id int) *TechnologyUpdateOne {
	tuo.mutation.SetStackID(id)
	return tuo
}

// SetNillableStackID sets the "stack" edge to the TechStack entity by ID if the given value is not nil.
func (tuo *TechnologyUpdateOne) SetNillableStackID(id *int) *TechnologyUpdateOne {
	if id != nil {
		tuo = tuo.SetStackID(*id)
	}
	return tuo
}

// SetStack sets the "stack" edge to the TechStack entity.
func (tuo *TechnologyUpdateOne) SetStack(t *TechStack) *TechnologyUpdateOne {
	return tuo.SetStackID(t.ID)
}

// Mutation returns the TechnologyMutation object of the builder.
func (tuo *TechnologyUpdateOne) Mutation() *TechnologyMutation {
	return tuo.mutation
}

// ClearApplication clears all "application" edges to the Application entity.
func (tuo *TechnologyUpdateOne) ClearApplication() *TechnologyUpdateOne {
	tuo.mutation.ClearApplication()
	return tuo
}

// RemoveApplicationIDs removes the "application" edge to Application entities by IDs.
func (tuo *TechnologyUpdateOne) RemoveApplicationIDs(ids ...int) *TechnologyUpdateOne {
	tuo.mutation.RemoveApplicationIDs(ids...)
	return tuo
}

// RemoveApplication removes "application" edges to Application entities.
func (tuo *TechnologyUpdateOne) RemoveApplication(a ...*Application) *TechnologyUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveApplicationIDs(ids...)
}

// ClearStack clears the "stack" edge to the TechStack entity.
func (tuo *TechnologyUpdateOne) ClearStack() *TechnologyUpdateOne {
	tuo.mutation.ClearStack()
	return tuo
}

// Where appends a list predicates to the TechnologyUpdate builder.
func (tuo *TechnologyUpdateOne) Where(ps ...predicate.Technology) *TechnologyUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TechnologyUpdateOne) Select(field string, fields ...string) *TechnologyUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Technology entity.
func (tuo *TechnologyUpdateOne) Save(ctx context.Context) (*Technology, error) {
	return withHooks[*Technology, TechnologyMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) SaveX(ctx context.Context) *Technology {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechnologyUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechnologyUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TechnologyUpdateOne) sqlSave(ctx context.Context) (_node *Technology, err error) {
	_spec := sqlgraph.NewUpdateSpec(technology.Table, technology.Columns, sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Technology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, technology.FieldID)
		for _, f := range fields {
			if !technology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != technology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(technology.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.URL(); ok {
		_spec.SetField(technology.FieldURL, field.TypeString, value)
	}
	if tuo.mutation.URLCleared() {
		_spec.ClearField(technology.FieldURL, field.TypeString)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(technology.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedPriority(); ok {
		_spec.AddField(technology.FieldPriority, field.TypeInt32, value)
	}
	if tuo.mutation.PriorityCleared() {
		_spec.ClearField(technology.FieldPriority, field.TypeInt32)
	}
	if tuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedApplicationIDs(); len(nodes) > 0 && !tuo.mutation.ApplicationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ApplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   technology.ApplicationTable,
			Columns: technology.ApplicationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   technology.StackTable,
			Columns: []string{technology.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   technology.StackTable,
			Columns: []string{technology.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Technology{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{technology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
