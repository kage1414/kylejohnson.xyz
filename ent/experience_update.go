// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/description"
	"kylejohnson-xyz/ent/experience"
	"kylejohnson-xyz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExperienceUpdate is the builder for updating Experience entities.
type ExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *ExperienceMutation
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (eu *ExperienceUpdate) Where(ps ...predicate.Experience) *ExperienceUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEmployer sets the "employer" field.
func (eu *ExperienceUpdate) SetEmployer(s string) *ExperienceUpdate {
	eu.mutation.SetEmployer(s)
	return eu
}

// SetPosition sets the "position" field.
func (eu *ExperienceUpdate) SetPosition(s string) *ExperienceUpdate {
	eu.mutation.SetPosition(s)
	return eu
}

// SetTime sets the "time" field.
func (eu *ExperienceUpdate) SetTime(s string) *ExperienceUpdate {
	eu.mutation.SetTime(s)
	return eu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableTime(s *string) *ExperienceUpdate {
	if s != nil {
		eu.SetTime(*s)
	}
	return eu
}

// ClearTime clears the value of the "time" field.
func (eu *ExperienceUpdate) ClearTime() *ExperienceUpdate {
	eu.mutation.ClearTime()
	return eu
}

// SetActive sets the "active" field.
func (eu *ExperienceUpdate) SetActive(b bool) *ExperienceUpdate {
	eu.mutation.SetActive(b)
	return eu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableActive(b *bool) *ExperienceUpdate {
	if b != nil {
		eu.SetActive(*b)
	}
	return eu
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (eu *ExperienceUpdate) AddDescriptionIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.AddDescriptionIDs(ids...)
	return eu
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (eu *ExperienceUpdate) AddDescriptions(d ...*Description) *ExperienceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDescriptionIDs(ids...)
}

// Mutation returns the ExperienceMutation object of the builder.
func (eu *ExperienceUpdate) Mutation() *ExperienceMutation {
	return eu.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (eu *ExperienceUpdate) ClearDescriptions() *ExperienceUpdate {
	eu.mutation.ClearDescriptions()
	return eu
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (eu *ExperienceUpdate) RemoveDescriptionIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.RemoveDescriptionIDs(ids...)
	return eu
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (eu *ExperienceUpdate) RemoveDescriptions(d ...*Description) *ExperienceUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDescriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExperienceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ExperienceMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExperienceUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExperienceUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Employer(); ok {
		_spec.SetField(experience.FieldEmployer, field.TypeString, value)
	}
	if value, ok := eu.mutation.Position(); ok {
		_spec.SetField(experience.FieldPosition, field.TypeString, value)
	}
	if value, ok := eu.mutation.Time(); ok {
		_spec.SetField(experience.FieldTime, field.TypeString, value)
	}
	if eu.mutation.TimeCleared() {
		_spec.ClearField(experience.FieldTime, field.TypeString)
	}
	if value, ok := eu.mutation.Active(); ok {
		_spec.SetField(experience.FieldActive, field.TypeBool, value)
	}
	if eu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !eu.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExperienceUpdateOne is the builder for updating a single Experience entity.
type ExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExperienceMutation
}

// SetEmployer sets the "employer" field.
func (euo *ExperienceUpdateOne) SetEmployer(s string) *ExperienceUpdateOne {
	euo.mutation.SetEmployer(s)
	return euo
}

// SetPosition sets the "position" field.
func (euo *ExperienceUpdateOne) SetPosition(s string) *ExperienceUpdateOne {
	euo.mutation.SetPosition(s)
	return euo
}

// SetTime sets the "time" field.
func (euo *ExperienceUpdateOne) SetTime(s string) *ExperienceUpdateOne {
	euo.mutation.SetTime(s)
	return euo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableTime(s *string) *ExperienceUpdateOne {
	if s != nil {
		euo.SetTime(*s)
	}
	return euo
}

// ClearTime clears the value of the "time" field.
func (euo *ExperienceUpdateOne) ClearTime() *ExperienceUpdateOne {
	euo.mutation.ClearTime()
	return euo
}

// SetActive sets the "active" field.
func (euo *ExperienceUpdateOne) SetActive(b bool) *ExperienceUpdateOne {
	euo.mutation.SetActive(b)
	return euo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableActive(b *bool) *ExperienceUpdateOne {
	if b != nil {
		euo.SetActive(*b)
	}
	return euo
}

// AddDescriptionIDs adds the "descriptions" edge to the Description entity by IDs.
func (euo *ExperienceUpdateOne) AddDescriptionIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.AddDescriptionIDs(ids...)
	return euo
}

// AddDescriptions adds the "descriptions" edges to the Description entity.
func (euo *ExperienceUpdateOne) AddDescriptions(d ...*Description) *ExperienceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDescriptionIDs(ids...)
}

// Mutation returns the ExperienceMutation object of the builder.
func (euo *ExperienceUpdateOne) Mutation() *ExperienceMutation {
	return euo.mutation
}

// ClearDescriptions clears all "descriptions" edges to the Description entity.
func (euo *ExperienceUpdateOne) ClearDescriptions() *ExperienceUpdateOne {
	euo.mutation.ClearDescriptions()
	return euo
}

// RemoveDescriptionIDs removes the "descriptions" edge to Description entities by IDs.
func (euo *ExperienceUpdateOne) RemoveDescriptionIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.RemoveDescriptionIDs(ids...)
	return euo
}

// RemoveDescriptions removes "descriptions" edges to Description entities.
func (euo *ExperienceUpdateOne) RemoveDescriptions(d ...*Description) *ExperienceUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDescriptionIDs(ids...)
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (euo *ExperienceUpdateOne) Where(ps ...predicate.Experience) *ExperienceUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExperienceUpdateOne) Select(field string, fields ...string) *ExperienceUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Experience entity.
func (euo *ExperienceUpdateOne) Save(ctx context.Context) (*Experience, error) {
	return withHooks[*Experience, ExperienceMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExperienceUpdateOne) SaveX(ctx context.Context) *Experience {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExperienceUpdateOne) sqlSave(ctx context.Context) (_node *Experience, err error) {
	_spec := sqlgraph.NewUpdateSpec(experience.Table, experience.Columns, sqlgraph.NewFieldSpec(experience.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Experience.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, experience.FieldID)
		for _, f := range fields {
			if !experience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != experience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Employer(); ok {
		_spec.SetField(experience.FieldEmployer, field.TypeString, value)
	}
	if value, ok := euo.mutation.Position(); ok {
		_spec.SetField(experience.FieldPosition, field.TypeString, value)
	}
	if value, ok := euo.mutation.Time(); ok {
		_spec.SetField(experience.FieldTime, field.TypeString, value)
	}
	if euo.mutation.TimeCleared() {
		_spec.ClearField(experience.FieldTime, field.TypeString)
	}
	if value, ok := euo.mutation.Active(); ok {
		_spec.SetField(experience.FieldActive, field.TypeBool, value)
	}
	if euo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDescriptionsIDs(); len(nodes) > 0 && !euo.mutation.DescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.DescriptionsTable,
			Columns: []string{experience.DescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(description.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Experience{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
