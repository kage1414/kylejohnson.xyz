// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/invite"
	"kylejohnson-xyz/ent/predicate"
	"kylejohnson-xyz/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InviteUpdate is the builder for updating Invite entities.
type InviteUpdate struct {
	config
	hooks    []Hook
	mutation *InviteMutation
}

// Where appends a list predicates to the InviteUpdate builder.
func (iu *InviteUpdate) Where(ps ...predicate.Invite) *InviteUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetEmail sets the "email" field.
func (iu *InviteUpdate) SetEmail(s string) *InviteUpdate {
	iu.mutation.SetEmail(s)
	return iu
}

// SetKey sets the "key" field.
func (iu *InviteUpdate) SetKey(s string) *InviteUpdate {
	iu.mutation.SetKey(s)
	return iu
}

// SetRegistered sets the "registered" field.
func (iu *InviteUpdate) SetRegistered(b bool) *InviteUpdate {
	iu.mutation.SetRegistered(b)
	return iu
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (iu *InviteUpdate) SetNillableRegistered(b *bool) *InviteUpdate {
	if b != nil {
		iu.SetRegistered(*b)
	}
	return iu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *InviteUpdate) SetUserID(id int) *InviteUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *InviteUpdate) SetUser(u *User) *InviteUpdate {
	return iu.SetUserID(u.ID)
}

// Mutation returns the InviteMutation object of the builder.
func (iu *InviteUpdate) Mutation() *InviteMutation {
	return iu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iu *InviteUpdate) ClearUser() *InviteUpdate {
	iu.mutation.ClearUser()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InviteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, InviteMutation](ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InviteUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InviteUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InviteUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InviteUpdate) check() error {
	if _, ok := iu.mutation.UserID(); iu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.user"`)
	}
	return nil
}

func (iu *InviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Email(); ok {
		_spec.SetField(invite.FieldEmail, field.TypeString, value)
	}
	if value, ok := iu.mutation.Key(); ok {
		_spec.SetField(invite.FieldKey, field.TypeString, value)
	}
	if value, ok := iu.mutation.Registered(); ok {
		_spec.SetField(invite.FieldRegistered, field.TypeBool, value)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.UserTable,
			Columns: []string{invite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.UserTable,
			Columns: []string{invite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InviteUpdateOne is the builder for updating a single Invite entity.
type InviteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InviteMutation
}

// SetEmail sets the "email" field.
func (iuo *InviteUpdateOne) SetEmail(s string) *InviteUpdateOne {
	iuo.mutation.SetEmail(s)
	return iuo
}

// SetKey sets the "key" field.
func (iuo *InviteUpdateOne) SetKey(s string) *InviteUpdateOne {
	iuo.mutation.SetKey(s)
	return iuo
}

// SetRegistered sets the "registered" field.
func (iuo *InviteUpdateOne) SetRegistered(b bool) *InviteUpdateOne {
	iuo.mutation.SetRegistered(b)
	return iuo
}

// SetNillableRegistered sets the "registered" field if the given value is not nil.
func (iuo *InviteUpdateOne) SetNillableRegistered(b *bool) *InviteUpdateOne {
	if b != nil {
		iuo.SetRegistered(*b)
	}
	return iuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *InviteUpdateOne) SetUserID(id int) *InviteUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *InviteUpdateOne) SetUser(u *User) *InviteUpdateOne {
	return iuo.SetUserID(u.ID)
}

// Mutation returns the InviteMutation object of the builder.
func (iuo *InviteUpdateOne) Mutation() *InviteMutation {
	return iuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *InviteUpdateOne) ClearUser() *InviteUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// Where appends a list predicates to the InviteUpdate builder.
func (iuo *InviteUpdateOne) Where(ps ...predicate.Invite) *InviteUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InviteUpdateOne) Select(field string, fields ...string) *InviteUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invite entity.
func (iuo *InviteUpdateOne) Save(ctx context.Context) (*Invite, error) {
	return withHooks[*Invite, InviteMutation](ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InviteUpdateOne) SaveX(ctx context.Context) *Invite {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InviteUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InviteUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InviteUpdateOne) check() error {
	if _, ok := iuo.mutation.UserID(); iuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Invite.user"`)
	}
	return nil
}

func (iuo *InviteUpdateOne) sqlSave(ctx context.Context) (_node *Invite, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invite.Table, invite.Columns, sqlgraph.NewFieldSpec(invite.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invite.FieldID)
		for _, f := range fields {
			if !invite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Email(); ok {
		_spec.SetField(invite.FieldEmail, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Key(); ok {
		_spec.SetField(invite.FieldKey, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Registered(); ok {
		_spec.SetField(invite.FieldRegistered, field.TypeBool, value)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.UserTable,
			Columns: []string{invite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.UserTable,
			Columns: []string{invite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invite{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
