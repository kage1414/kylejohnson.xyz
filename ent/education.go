// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kylejohnson-xyz/ent/education"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Education is the model entity for the Education schema.
type Education struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// School holds the value of the "school" field.
	School string `json:"school,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Certificate holds the value of the "certificate" field.
	Certificate string `json:"certificate,omitempty"`
	// Degree holds the value of the "degree" field.
	Degree string `json:"degree,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority     int32 `json:"priority,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Education) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case education.FieldActive:
			values[i] = new(sql.NullBool)
		case education.FieldPriority:
			values[i] = new(sql.NullInt64)
		case education.FieldSchool, education.FieldTime, education.FieldCertificate, education.FieldDegree:
			values[i] = new(sql.NullString)
		case education.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Education fields.
func (e *Education) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case education.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case education.FieldSchool:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field school", values[i])
			} else if value.Valid {
				e.School = value.String
			}
		case education.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				e.Time = value.String
			}
		case education.FieldCertificate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certificate", values[i])
			} else if value.Valid {
				e.Certificate = value.String
			}
		case education.FieldDegree:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field degree", values[i])
			} else if value.Valid {
				e.Degree = value.String
			}
		case education.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				e.Active = value.Bool
			}
		case education.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				e.Priority = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Education.
// This includes values selected through modifiers, order, etc.
func (e *Education) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Education.
// Note that you need to call Education.Unwrap() before calling this method if this Education
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Education) Update() *EducationUpdateOne {
	return NewEducationClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Education entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Education) Unwrap() *Education {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Education is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Education) String() string {
	var builder strings.Builder
	builder.WriteString("Education(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("school=")
	builder.WriteString(e.School)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(e.Time)
	builder.WriteString(", ")
	builder.WriteString("certificate=")
	builder.WriteString(e.Certificate)
	builder.WriteString(", ")
	builder.WriteString("degree=")
	builder.WriteString(e.Degree)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", e.Active))
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", e.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// Educations is a parsable slice of Education.
type Educations []*Education
