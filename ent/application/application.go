// Code generated by ent, DO NOT EDIT.

package application

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the application type in the database.
	Label = "application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// EdgeDescriptions holds the string denoting the descriptions edge name in mutations.
	EdgeDescriptions = "descriptions"
	// EdgeTechnologies holds the string denoting the technologies edge name in mutations.
	EdgeTechnologies = "technologies"
	// Table holds the table name of the application in the database.
	Table = "applications"
	// DescriptionsTable is the table that holds the descriptions relation/edge.
	DescriptionsTable = "descriptions"
	// DescriptionsInverseTable is the table name for the Description entity.
	// It exists in this package in order to avoid circular dependency with the "description" package.
	DescriptionsInverseTable = "descriptions"
	// DescriptionsColumn is the table column denoting the descriptions relation/edge.
	DescriptionsColumn = "application_descriptions"
	// TechnologiesTable is the table that holds the technologies relation/edge.
	TechnologiesTable = "technologies"
	// TechnologiesInverseTable is the table name for the Technology entity.
	// It exists in this package in order to avoid circular dependency with the "technology" package.
	TechnologiesInverseTable = "technologies"
	// TechnologiesColumn is the table column denoting the technologies relation/edge.
	TechnologiesColumn = "application_technologies"
)

// Columns holds all SQL columns for application fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldActive,
	FieldPriority,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the Application queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByDescriptionsCount orders the results by descriptions count.
func ByDescriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDescriptionsStep(), opts...)
	}
}

// ByDescriptions orders the results by descriptions terms.
func ByDescriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDescriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTechnologiesCount orders the results by technologies count.
func ByTechnologiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTechnologiesStep(), opts...)
	}
}

// ByTechnologies orders the results by technologies terms.
func ByTechnologies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechnologiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDescriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DescriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DescriptionsTable, DescriptionsColumn),
	)
}
func newTechnologiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechnologiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TechnologiesTable, TechnologiesColumn),
	)
}
