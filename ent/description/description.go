// Code generated by ent, DO NOT EDIT.

package description

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the description type in the database.
	Label = "description"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeExperience holds the string denoting the experience edge name in mutations.
	EdgeExperience = "experience"
	// EdgeApplication holds the string denoting the application edge name in mutations.
	EdgeApplication = "application"
	// Table holds the table name of the description in the database.
	Table = "descriptions"
	// ExperienceTable is the table that holds the experience relation/edge.
	ExperienceTable = "descriptions"
	// ExperienceInverseTable is the table name for the Experience entity.
	// It exists in this package in order to avoid circular dependency with the "experience" package.
	ExperienceInverseTable = "experiences"
	// ExperienceColumn is the table column denoting the experience relation/edge.
	ExperienceColumn = "experience_descriptions"
	// ApplicationTable is the table that holds the application relation/edge.
	ApplicationTable = "descriptions"
	// ApplicationInverseTable is the table name for the Application entity.
	// It exists in this package in order to avoid circular dependency with the "application" package.
	ApplicationInverseTable = "applications"
	// ApplicationColumn is the table column denoting the application relation/edge.
	ApplicationColumn = "application_descriptions"
)

// Columns holds all SQL columns for description fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "descriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"application_descriptions",
	"experience_descriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the Description queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByExperienceField orders the results by experience field.
func ByExperienceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExperienceStep(), sql.OrderByField(field, opts...))
	}
}

// ByApplicationField orders the results by application field.
func ByApplicationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationStep(), sql.OrderByField(field, opts...))
	}
}
func newExperienceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExperienceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExperienceTable, ExperienceColumn),
	)
}
func newApplicationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApplicationTable, ApplicationColumn),
	)
}
