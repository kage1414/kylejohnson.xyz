// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"kylejohnson-xyz/ent/migrate"

	"kylejohnson-xyz/ent/application"
	"kylejohnson-xyz/ent/description"
	"kylejohnson-xyz/ent/education"
	"kylejohnson-xyz/ent/experience"
	"kylejohnson-xyz/ent/invite"
	"kylejohnson-xyz/ent/technology"
	"kylejohnson-xyz/ent/techstack"
	"kylejohnson-xyz/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// Description is the client for interacting with the Description builders.
	Description *DescriptionClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Experience is the client for interacting with the Experience builders.
	Experience *ExperienceClient
	// Invite is the client for interacting with the Invite builders.
	Invite *InviteClient
	// TechStack is the client for interacting with the TechStack builders.
	TechStack *TechStackClient
	// Technology is the client for interacting with the Technology builders.
	Technology *TechnologyClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Application = NewApplicationClient(c.config)
	c.Description = NewDescriptionClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.Experience = NewExperienceClient(c.config)
	c.Invite = NewInviteClient(c.config)
	c.TechStack = NewTechStackClient(c.config)
	c.Technology = NewTechnologyClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Application: NewApplicationClient(cfg),
		Description: NewDescriptionClient(cfg),
		Education:   NewEducationClient(cfg),
		Experience:  NewExperienceClient(cfg),
		Invite:      NewInviteClient(cfg),
		TechStack:   NewTechStackClient(cfg),
		Technology:  NewTechnologyClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Application: NewApplicationClient(cfg),
		Description: NewDescriptionClient(cfg),
		Education:   NewEducationClient(cfg),
		Experience:  NewExperienceClient(cfg),
		Invite:      NewInviteClient(cfg),
		TechStack:   NewTechStackClient(cfg),
		Technology:  NewTechnologyClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Application.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Application, c.Description, c.Education, c.Experience, c.Invite, c.TechStack,
		c.Technology, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Application, c.Description, c.Education, c.Experience, c.Invite, c.TechStack,
		c.Technology, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApplicationMutation:
		return c.Application.mutate(ctx, m)
	case *DescriptionMutation:
		return c.Description.mutate(ctx, m)
	case *EducationMutation:
		return c.Education.mutate(ctx, m)
	case *ExperienceMutation:
		return c.Experience.mutate(ctx, m)
	case *InviteMutation:
		return c.Invite.mutate(ctx, m)
	case *TechStackMutation:
		return c.TechStack.mutate(ctx, m)
	case *TechnologyMutation:
		return c.Technology.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ApplicationClient is a client for the Application schema.
type ApplicationClient struct {
	config
}

// NewApplicationClient returns a client for the Application from the given config.
func NewApplicationClient(c config) *ApplicationClient {
	return &ApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `application.Hooks(f(g(h())))`.
func (c *ApplicationClient) Use(hooks ...Hook) {
	c.hooks.Application = append(c.hooks.Application, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `application.Intercept(f(g(h())))`.
func (c *ApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Application = append(c.inters.Application, interceptors...)
}

// Create returns a builder for creating a Application entity.
func (c *ApplicationClient) Create() *ApplicationCreate {
	mutation := newApplicationMutation(c.config, OpCreate)
	return &ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Application entities.
func (c *ApplicationClient) CreateBulk(builders ...*ApplicationCreate) *ApplicationCreateBulk {
	return &ApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Application.
func (c *ApplicationClient) Update() *ApplicationUpdate {
	mutation := newApplicationMutation(c.config, OpUpdate)
	return &ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApplicationClient) UpdateOne(a *Application) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplication(a))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApplicationClient) UpdateOneID(id uuid.UUID) *ApplicationUpdateOne {
	mutation := newApplicationMutation(c.config, OpUpdateOne, withApplicationID(id))
	return &ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Application.
func (c *ApplicationClient) Delete() *ApplicationDelete {
	mutation := newApplicationMutation(c.config, OpDelete)
	return &ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApplicationClient) DeleteOne(a *Application) *ApplicationDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApplicationClient) DeleteOneID(id uuid.UUID) *ApplicationDeleteOne {
	builder := c.Delete().Where(application.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApplicationDeleteOne{builder}
}

// Query returns a query builder for Application.
func (c *ApplicationClient) Query() *ApplicationQuery {
	return &ApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a Application entity by its id.
func (c *ApplicationClient) Get(ctx context.Context, id uuid.UUID) (*Application, error) {
	return c.Query().Where(application.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApplicationClient) GetX(ctx context.Context, id uuid.UUID) *Application {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptions queries the descriptions edge of a Application.
func (c *ApplicationClient) QueryDescriptions(a *Application) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, application.DescriptionsTable, application.DescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTechnologies queries the technologies edge of a Application.
func (c *ApplicationClient) QueryTechnologies(a *Application) *TechnologyQuery {
	query := (&TechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(application.Table, application.FieldID, id),
			sqlgraph.To(technology.Table, technology.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, application.TechnologiesTable, application.TechnologiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ApplicationClient) Hooks() []Hook {
	return c.hooks.Application
}

// Interceptors returns the client interceptors.
func (c *ApplicationClient) Interceptors() []Interceptor {
	return c.inters.Application
}

func (c *ApplicationClient) mutate(ctx context.Context, m *ApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Application mutation op: %q", m.Op())
	}
}

// DescriptionClient is a client for the Description schema.
type DescriptionClient struct {
	config
}

// NewDescriptionClient returns a client for the Description from the given config.
func NewDescriptionClient(c config) *DescriptionClient {
	return &DescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `description.Hooks(f(g(h())))`.
func (c *DescriptionClient) Use(hooks ...Hook) {
	c.hooks.Description = append(c.hooks.Description, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `description.Intercept(f(g(h())))`.
func (c *DescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Description = append(c.inters.Description, interceptors...)
}

// Create returns a builder for creating a Description entity.
func (c *DescriptionClient) Create() *DescriptionCreate {
	mutation := newDescriptionMutation(c.config, OpCreate)
	return &DescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Description entities.
func (c *DescriptionClient) CreateBulk(builders ...*DescriptionCreate) *DescriptionCreateBulk {
	return &DescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Description.
func (c *DescriptionClient) Update() *DescriptionUpdate {
	mutation := newDescriptionMutation(c.config, OpUpdate)
	return &DescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DescriptionClient) UpdateOne(d *Description) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescription(d))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DescriptionClient) UpdateOneID(id uuid.UUID) *DescriptionUpdateOne {
	mutation := newDescriptionMutation(c.config, OpUpdateOne, withDescriptionID(id))
	return &DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Description.
func (c *DescriptionClient) Delete() *DescriptionDelete {
	mutation := newDescriptionMutation(c.config, OpDelete)
	return &DescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DescriptionClient) DeleteOne(d *Description) *DescriptionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DescriptionClient) DeleteOneID(id uuid.UUID) *DescriptionDeleteOne {
	builder := c.Delete().Where(description.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DescriptionDeleteOne{builder}
}

// Query returns a query builder for Description.
func (c *DescriptionClient) Query() *DescriptionQuery {
	return &DescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDescription},
		inters: c.Interceptors(),
	}
}

// Get returns a Description entity by its id.
func (c *DescriptionClient) Get(ctx context.Context, id uuid.UUID) (*Description, error) {
	return c.Query().Where(description.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DescriptionClient) GetX(ctx context.Context, id uuid.UUID) *Description {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExperience queries the experience edge of a Description.
func (c *DescriptionClient) QueryExperience(d *Description) *ExperienceQuery {
	query := (&ExperienceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(experience.Table, experience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.ExperienceTable, description.ExperienceColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplication queries the application edge of a Description.
func (c *DescriptionClient) QueryApplication(d *Description) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(description.Table, description.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, description.ApplicationTable, description.ApplicationColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DescriptionClient) Hooks() []Hook {
	return c.hooks.Description
}

// Interceptors returns the client interceptors.
func (c *DescriptionClient) Interceptors() []Interceptor {
	return c.inters.Description
}

func (c *DescriptionClient) mutate(ctx context.Context, m *DescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Description mutation op: %q", m.Op())
	}
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `education.Intercept(f(g(h())))`.
func (c *EducationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Education = append(c.inters.Education, interceptors...)
}

// Create returns a builder for creating a Education entity.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id uuid.UUID) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EducationClient) DeleteOneID(id uuid.UUID) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEducation},
		inters: c.Interceptors(),
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id uuid.UUID) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id uuid.UUID) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// Interceptors returns the client interceptors.
func (c *EducationClient) Interceptors() []Interceptor {
	return c.inters.Education
}

func (c *EducationClient) mutate(ctx context.Context, m *EducationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EducationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EducationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Education mutation op: %q", m.Op())
	}
}

// ExperienceClient is a client for the Experience schema.
type ExperienceClient struct {
	config
}

// NewExperienceClient returns a client for the Experience from the given config.
func NewExperienceClient(c config) *ExperienceClient {
	return &ExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `experience.Hooks(f(g(h())))`.
func (c *ExperienceClient) Use(hooks ...Hook) {
	c.hooks.Experience = append(c.hooks.Experience, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `experience.Intercept(f(g(h())))`.
func (c *ExperienceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Experience = append(c.inters.Experience, interceptors...)
}

// Create returns a builder for creating a Experience entity.
func (c *ExperienceClient) Create() *ExperienceCreate {
	mutation := newExperienceMutation(c.config, OpCreate)
	return &ExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Experience entities.
func (c *ExperienceClient) CreateBulk(builders ...*ExperienceCreate) *ExperienceCreateBulk {
	return &ExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Experience.
func (c *ExperienceClient) Update() *ExperienceUpdate {
	mutation := newExperienceMutation(c.config, OpUpdate)
	return &ExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExperienceClient) UpdateOne(e *Experience) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperience(e))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExperienceClient) UpdateOneID(id uuid.UUID) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperienceID(id))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Experience.
func (c *ExperienceClient) Delete() *ExperienceDelete {
	mutation := newExperienceMutation(c.config, OpDelete)
	return &ExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExperienceClient) DeleteOne(e *Experience) *ExperienceDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExperienceClient) DeleteOneID(id uuid.UUID) *ExperienceDeleteOne {
	builder := c.Delete().Where(experience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExperienceDeleteOne{builder}
}

// Query returns a query builder for Experience.
func (c *ExperienceClient) Query() *ExperienceQuery {
	return &ExperienceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExperience},
		inters: c.Interceptors(),
	}
}

// Get returns a Experience entity by its id.
func (c *ExperienceClient) Get(ctx context.Context, id uuid.UUID) (*Experience, error) {
	return c.Query().Where(experience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExperienceClient) GetX(ctx context.Context, id uuid.UUID) *Experience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptions queries the descriptions edge of a Experience.
func (c *ExperienceClient) QueryDescriptions(e *Experience) *DescriptionQuery {
	query := (&DescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(experience.Table, experience.FieldID, id),
			sqlgraph.To(description.Table, description.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, experience.DescriptionsTable, experience.DescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExperienceClient) Hooks() []Hook {
	return c.hooks.Experience
}

// Interceptors returns the client interceptors.
func (c *ExperienceClient) Interceptors() []Interceptor {
	return c.inters.Experience
}

func (c *ExperienceClient) mutate(ctx context.Context, m *ExperienceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Experience mutation op: %q", m.Op())
	}
}

// InviteClient is a client for the Invite schema.
type InviteClient struct {
	config
}

// NewInviteClient returns a client for the Invite from the given config.
func NewInviteClient(c config) *InviteClient {
	return &InviteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invite.Hooks(f(g(h())))`.
func (c *InviteClient) Use(hooks ...Hook) {
	c.hooks.Invite = append(c.hooks.Invite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invite.Intercept(f(g(h())))`.
func (c *InviteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Invite = append(c.inters.Invite, interceptors...)
}

// Create returns a builder for creating a Invite entity.
func (c *InviteClient) Create() *InviteCreate {
	mutation := newInviteMutation(c.config, OpCreate)
	return &InviteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Invite entities.
func (c *InviteClient) CreateBulk(builders ...*InviteCreate) *InviteCreateBulk {
	return &InviteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Invite.
func (c *InviteClient) Update() *InviteUpdate {
	mutation := newInviteMutation(c.config, OpUpdate)
	return &InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteClient) UpdateOne(i *Invite) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInvite(i))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteClient) UpdateOneID(id uuid.UUID) *InviteUpdateOne {
	mutation := newInviteMutation(c.config, OpUpdateOne, withInviteID(id))
	return &InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Invite.
func (c *InviteClient) Delete() *InviteDelete {
	mutation := newInviteMutation(c.config, OpDelete)
	return &InviteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InviteClient) DeleteOne(i *Invite) *InviteDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InviteClient) DeleteOneID(id uuid.UUID) *InviteDeleteOne {
	builder := c.Delete().Where(invite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteDeleteOne{builder}
}

// Query returns a query builder for Invite.
func (c *InviteClient) Query() *InviteQuery {
	return &InviteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInvite},
		inters: c.Interceptors(),
	}
}

// Get returns a Invite entity by its id.
func (c *InviteClient) Get(ctx context.Context, id uuid.UUID) (*Invite, error) {
	return c.Query().Where(invite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteClient) GetX(ctx context.Context, id uuid.UUID) *Invite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Invite.
func (c *InviteClient) QueryUser(i *Invite) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invite.Table, invite.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invite.UserTable, invite.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteClient) Hooks() []Hook {
	return c.hooks.Invite
}

// Interceptors returns the client interceptors.
func (c *InviteClient) Interceptors() []Interceptor {
	return c.inters.Invite
}

func (c *InviteClient) mutate(ctx context.Context, m *InviteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InviteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InviteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InviteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InviteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Invite mutation op: %q", m.Op())
	}
}

// TechStackClient is a client for the TechStack schema.
type TechStackClient struct {
	config
}

// NewTechStackClient returns a client for the TechStack from the given config.
func NewTechStackClient(c config) *TechStackClient {
	return &TechStackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `techstack.Hooks(f(g(h())))`.
func (c *TechStackClient) Use(hooks ...Hook) {
	c.hooks.TechStack = append(c.hooks.TechStack, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `techstack.Intercept(f(g(h())))`.
func (c *TechStackClient) Intercept(interceptors ...Interceptor) {
	c.inters.TechStack = append(c.inters.TechStack, interceptors...)
}

// Create returns a builder for creating a TechStack entity.
func (c *TechStackClient) Create() *TechStackCreate {
	mutation := newTechStackMutation(c.config, OpCreate)
	return &TechStackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TechStack entities.
func (c *TechStackClient) CreateBulk(builders ...*TechStackCreate) *TechStackCreateBulk {
	return &TechStackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TechStack.
func (c *TechStackClient) Update() *TechStackUpdate {
	mutation := newTechStackMutation(c.config, OpUpdate)
	return &TechStackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TechStackClient) UpdateOne(ts *TechStack) *TechStackUpdateOne {
	mutation := newTechStackMutation(c.config, OpUpdateOne, withTechStack(ts))
	return &TechStackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TechStackClient) UpdateOneID(id uuid.UUID) *TechStackUpdateOne {
	mutation := newTechStackMutation(c.config, OpUpdateOne, withTechStackID(id))
	return &TechStackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TechStack.
func (c *TechStackClient) Delete() *TechStackDelete {
	mutation := newTechStackMutation(c.config, OpDelete)
	return &TechStackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TechStackClient) DeleteOne(ts *TechStack) *TechStackDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TechStackClient) DeleteOneID(id uuid.UUID) *TechStackDeleteOne {
	builder := c.Delete().Where(techstack.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TechStackDeleteOne{builder}
}

// Query returns a query builder for TechStack.
func (c *TechStackClient) Query() *TechStackQuery {
	return &TechStackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTechStack},
		inters: c.Interceptors(),
	}
}

// Get returns a TechStack entity by its id.
func (c *TechStackClient) Get(ctx context.Context, id uuid.UUID) (*TechStack, error) {
	return c.Query().Where(techstack.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TechStackClient) GetX(ctx context.Context, id uuid.UUID) *TechStack {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTechnology queries the technology edge of a TechStack.
func (c *TechStackClient) QueryTechnology(ts *TechStack) *TechnologyQuery {
	query := (&TechnologyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(techstack.Table, techstack.FieldID, id),
			sqlgraph.To(technology.Table, technology.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, techstack.TechnologyTable, techstack.TechnologyColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TechStackClient) Hooks() []Hook {
	return c.hooks.TechStack
}

// Interceptors returns the client interceptors.
func (c *TechStackClient) Interceptors() []Interceptor {
	return c.inters.TechStack
}

func (c *TechStackClient) mutate(ctx context.Context, m *TechStackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TechStackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TechStackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TechStackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TechStackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TechStack mutation op: %q", m.Op())
	}
}

// TechnologyClient is a client for the Technology schema.
type TechnologyClient struct {
	config
}

// NewTechnologyClient returns a client for the Technology from the given config.
func NewTechnologyClient(c config) *TechnologyClient {
	return &TechnologyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `technology.Hooks(f(g(h())))`.
func (c *TechnologyClient) Use(hooks ...Hook) {
	c.hooks.Technology = append(c.hooks.Technology, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `technology.Intercept(f(g(h())))`.
func (c *TechnologyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Technology = append(c.inters.Technology, interceptors...)
}

// Create returns a builder for creating a Technology entity.
func (c *TechnologyClient) Create() *TechnologyCreate {
	mutation := newTechnologyMutation(c.config, OpCreate)
	return &TechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Technology entities.
func (c *TechnologyClient) CreateBulk(builders ...*TechnologyCreate) *TechnologyCreateBulk {
	return &TechnologyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Technology.
func (c *TechnologyClient) Update() *TechnologyUpdate {
	mutation := newTechnologyMutation(c.config, OpUpdate)
	return &TechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TechnologyClient) UpdateOne(t *Technology) *TechnologyUpdateOne {
	mutation := newTechnologyMutation(c.config, OpUpdateOne, withTechnology(t))
	return &TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TechnologyClient) UpdateOneID(id uuid.UUID) *TechnologyUpdateOne {
	mutation := newTechnologyMutation(c.config, OpUpdateOne, withTechnologyID(id))
	return &TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Technology.
func (c *TechnologyClient) Delete() *TechnologyDelete {
	mutation := newTechnologyMutation(c.config, OpDelete)
	return &TechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TechnologyClient) DeleteOne(t *Technology) *TechnologyDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TechnologyClient) DeleteOneID(id uuid.UUID) *TechnologyDeleteOne {
	builder := c.Delete().Where(technology.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TechnologyDeleteOne{builder}
}

// Query returns a query builder for Technology.
func (c *TechnologyClient) Query() *TechnologyQuery {
	return &TechnologyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTechnology},
		inters: c.Interceptors(),
	}
}

// Get returns a Technology entity by its id.
func (c *TechnologyClient) Get(ctx context.Context, id uuid.UUID) (*Technology, error) {
	return c.Query().Where(technology.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TechnologyClient) GetX(ctx context.Context, id uuid.UUID) *Technology {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApplication queries the application edge of a Technology.
func (c *TechnologyClient) QueryApplication(t *Technology) *ApplicationQuery {
	query := (&ApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, id),
			sqlgraph.To(application.Table, application.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, technology.ApplicationTable, technology.ApplicationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStack queries the stack edge of a Technology.
func (c *TechnologyClient) QueryStack(t *Technology) *TechStackQuery {
	query := (&TechStackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(technology.Table, technology.FieldID, id),
			sqlgraph.To(techstack.Table, techstack.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, technology.StackTable, technology.StackColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TechnologyClient) Hooks() []Hook {
	return c.hooks.Technology
}

// Interceptors returns the client interceptors.
func (c *TechnologyClient) Interceptors() []Interceptor {
	return c.inters.Technology
}

func (c *TechnologyClient) mutate(ctx context.Context, m *TechnologyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TechnologyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TechnologyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TechnologyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TechnologyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Technology mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvite queries the invite edge of a User.
func (c *UserClient) QueryInvite(u *User) *InviteQuery {
	query := (&InviteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.InviteTable, user.InviteColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Application, Description, Education, Experience, Invite, TechStack, Technology,
		User []ent.Hook
	}
	inters struct {
		Application, Description, Education, Experience, Invite, TechStack, Technology,
		User []ent.Interceptor
	}
)
