// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/education"
	"kylejohnson-xyz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EducationUpdate is the builder for updating Education entities.
type EducationUpdate struct {
	config
	hooks    []Hook
	mutation *EducationMutation
}

// Where appends a list predicates to the EducationUpdate builder.
func (eu *EducationUpdate) Where(ps ...predicate.Education) *EducationUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSchool sets the "school" field.
func (eu *EducationUpdate) SetSchool(s string) *EducationUpdate {
	eu.mutation.SetSchool(s)
	return eu
}

// SetTime sets the "time" field.
func (eu *EducationUpdate) SetTime(s string) *EducationUpdate {
	eu.mutation.SetTime(s)
	return eu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableTime(s *string) *EducationUpdate {
	if s != nil {
		eu.SetTime(*s)
	}
	return eu
}

// ClearTime clears the value of the "time" field.
func (eu *EducationUpdate) ClearTime() *EducationUpdate {
	eu.mutation.ClearTime()
	return eu
}

// SetCertificate sets the "certificate" field.
func (eu *EducationUpdate) SetCertificate(s string) *EducationUpdate {
	eu.mutation.SetCertificate(s)
	return eu
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableCertificate(s *string) *EducationUpdate {
	if s != nil {
		eu.SetCertificate(*s)
	}
	return eu
}

// ClearCertificate clears the value of the "certificate" field.
func (eu *EducationUpdate) ClearCertificate() *EducationUpdate {
	eu.mutation.ClearCertificate()
	return eu
}

// SetDegree sets the "degree" field.
func (eu *EducationUpdate) SetDegree(s string) *EducationUpdate {
	eu.mutation.SetDegree(s)
	return eu
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableDegree(s *string) *EducationUpdate {
	if s != nil {
		eu.SetDegree(*s)
	}
	return eu
}

// ClearDegree clears the value of the "degree" field.
func (eu *EducationUpdate) ClearDegree() *EducationUpdate {
	eu.mutation.ClearDegree()
	return eu
}

// SetActive sets the "active" field.
func (eu *EducationUpdate) SetActive(b bool) *EducationUpdate {
	eu.mutation.SetActive(b)
	return eu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (eu *EducationUpdate) SetNillableActive(b *bool) *EducationUpdate {
	if b != nil {
		eu.SetActive(*b)
	}
	return eu
}

// SetPriority sets the "priority" field.
func (eu *EducationUpdate) SetPriority(i int32) *EducationUpdate {
	eu.mutation.ResetPriority()
	eu.mutation.SetPriority(i)
	return eu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (eu *EducationUpdate) SetNillablePriority(i *int32) *EducationUpdate {
	if i != nil {
		eu.SetPriority(*i)
	}
	return eu
}

// AddPriority adds i to the "priority" field.
func (eu *EducationUpdate) AddPriority(i int32) *EducationUpdate {
	eu.mutation.AddPriority(i)
	return eu
}

// ClearPriority clears the value of the "priority" field.
func (eu *EducationUpdate) ClearPriority() *EducationUpdate {
	eu.mutation.ClearPriority()
	return eu
}

// Mutation returns the EducationMutation object of the builder.
func (eu *EducationUpdate) Mutation() *EducationMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EducationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EducationMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EducationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EducationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EducationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EducationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.School(); ok {
		_spec.SetField(education.FieldSchool, field.TypeString, value)
	}
	if value, ok := eu.mutation.Time(); ok {
		_spec.SetField(education.FieldTime, field.TypeString, value)
	}
	if eu.mutation.TimeCleared() {
		_spec.ClearField(education.FieldTime, field.TypeString)
	}
	if value, ok := eu.mutation.Certificate(); ok {
		_spec.SetField(education.FieldCertificate, field.TypeString, value)
	}
	if eu.mutation.CertificateCleared() {
		_spec.ClearField(education.FieldCertificate, field.TypeString)
	}
	if value, ok := eu.mutation.Degree(); ok {
		_spec.SetField(education.FieldDegree, field.TypeString, value)
	}
	if eu.mutation.DegreeCleared() {
		_spec.ClearField(education.FieldDegree, field.TypeString)
	}
	if value, ok := eu.mutation.Active(); ok {
		_spec.SetField(education.FieldActive, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Priority(); ok {
		_spec.SetField(education.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := eu.mutation.AddedPriority(); ok {
		_spec.AddField(education.FieldPriority, field.TypeInt32, value)
	}
	if eu.mutation.PriorityCleared() {
		_spec.ClearField(education.FieldPriority, field.TypeInt32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EducationUpdateOne is the builder for updating a single Education entity.
type EducationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EducationMutation
}

// SetSchool sets the "school" field.
func (euo *EducationUpdateOne) SetSchool(s string) *EducationUpdateOne {
	euo.mutation.SetSchool(s)
	return euo
}

// SetTime sets the "time" field.
func (euo *EducationUpdateOne) SetTime(s string) *EducationUpdateOne {
	euo.mutation.SetTime(s)
	return euo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableTime(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetTime(*s)
	}
	return euo
}

// ClearTime clears the value of the "time" field.
func (euo *EducationUpdateOne) ClearTime() *EducationUpdateOne {
	euo.mutation.ClearTime()
	return euo
}

// SetCertificate sets the "certificate" field.
func (euo *EducationUpdateOne) SetCertificate(s string) *EducationUpdateOne {
	euo.mutation.SetCertificate(s)
	return euo
}

// SetNillableCertificate sets the "certificate" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableCertificate(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetCertificate(*s)
	}
	return euo
}

// ClearCertificate clears the value of the "certificate" field.
func (euo *EducationUpdateOne) ClearCertificate() *EducationUpdateOne {
	euo.mutation.ClearCertificate()
	return euo
}

// SetDegree sets the "degree" field.
func (euo *EducationUpdateOne) SetDegree(s string) *EducationUpdateOne {
	euo.mutation.SetDegree(s)
	return euo
}

// SetNillableDegree sets the "degree" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableDegree(s *string) *EducationUpdateOne {
	if s != nil {
		euo.SetDegree(*s)
	}
	return euo
}

// ClearDegree clears the value of the "degree" field.
func (euo *EducationUpdateOne) ClearDegree() *EducationUpdateOne {
	euo.mutation.ClearDegree()
	return euo
}

// SetActive sets the "active" field.
func (euo *EducationUpdateOne) SetActive(b bool) *EducationUpdateOne {
	euo.mutation.SetActive(b)
	return euo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillableActive(b *bool) *EducationUpdateOne {
	if b != nil {
		euo.SetActive(*b)
	}
	return euo
}

// SetPriority sets the "priority" field.
func (euo *EducationUpdateOne) SetPriority(i int32) *EducationUpdateOne {
	euo.mutation.ResetPriority()
	euo.mutation.SetPriority(i)
	return euo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (euo *EducationUpdateOne) SetNillablePriority(i *int32) *EducationUpdateOne {
	if i != nil {
		euo.SetPriority(*i)
	}
	return euo
}

// AddPriority adds i to the "priority" field.
func (euo *EducationUpdateOne) AddPriority(i int32) *EducationUpdateOne {
	euo.mutation.AddPriority(i)
	return euo
}

// ClearPriority clears the value of the "priority" field.
func (euo *EducationUpdateOne) ClearPriority() *EducationUpdateOne {
	euo.mutation.ClearPriority()
	return euo
}

// Mutation returns the EducationMutation object of the builder.
func (euo *EducationUpdateOne) Mutation() *EducationMutation {
	return euo.mutation
}

// Where appends a list predicates to the EducationUpdate builder.
func (euo *EducationUpdateOne) Where(ps ...predicate.Education) *EducationUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EducationUpdateOne) Select(field string, fields ...string) *EducationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Education entity.
func (euo *EducationUpdateOne) Save(ctx context.Context) (*Education, error) {
	return withHooks[*Education, EducationMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EducationUpdateOne) SaveX(ctx context.Context) *Education {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EducationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EducationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EducationUpdateOne) sqlSave(ctx context.Context) (_node *Education, err error) {
	_spec := sqlgraph.NewUpdateSpec(education.Table, education.Columns, sqlgraph.NewFieldSpec(education.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Education.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, education.FieldID)
		for _, f := range fields {
			if !education.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != education.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.School(); ok {
		_spec.SetField(education.FieldSchool, field.TypeString, value)
	}
	if value, ok := euo.mutation.Time(); ok {
		_spec.SetField(education.FieldTime, field.TypeString, value)
	}
	if euo.mutation.TimeCleared() {
		_spec.ClearField(education.FieldTime, field.TypeString)
	}
	if value, ok := euo.mutation.Certificate(); ok {
		_spec.SetField(education.FieldCertificate, field.TypeString, value)
	}
	if euo.mutation.CertificateCleared() {
		_spec.ClearField(education.FieldCertificate, field.TypeString)
	}
	if value, ok := euo.mutation.Degree(); ok {
		_spec.SetField(education.FieldDegree, field.TypeString, value)
	}
	if euo.mutation.DegreeCleared() {
		_spec.ClearField(education.FieldDegree, field.TypeString)
	}
	if value, ok := euo.mutation.Active(); ok {
		_spec.SetField(education.FieldActive, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Priority(); ok {
		_spec.SetField(education.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := euo.mutation.AddedPriority(); ok {
		_spec.AddField(education.FieldPriority, field.TypeInt32, value)
	}
	if euo.mutation.PriorityCleared() {
		_spec.ClearField(education.FieldPriority, field.TypeInt32)
	}
	_node = &Education{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{education.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
