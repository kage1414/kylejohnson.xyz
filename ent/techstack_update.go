// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kylejohnson-xyz/ent/predicate"
	"kylejohnson-xyz/ent/technology"
	"kylejohnson-xyz/ent/techstack"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TechStackUpdate is the builder for updating TechStack entities.
type TechStackUpdate struct {
	config
	hooks    []Hook
	mutation *TechStackMutation
}

// Where appends a list predicates to the TechStackUpdate builder.
func (tsu *TechStackUpdate) Where(ps ...predicate.TechStack) *TechStackUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetStack sets the "stack" field.
func (tsu *TechStackUpdate) SetStack(s string) *TechStackUpdate {
	tsu.mutation.SetStack(s)
	return tsu
}

// AddTechnologyIDs adds the "technology" edge to the Technology entity by IDs.
func (tsu *TechStackUpdate) AddTechnologyIDs(ids ...int) *TechStackUpdate {
	tsu.mutation.AddTechnologyIDs(ids...)
	return tsu
}

// AddTechnology adds the "technology" edges to the Technology entity.
func (tsu *TechStackUpdate) AddTechnology(t ...*Technology) *TechStackUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.AddTechnologyIDs(ids...)
}

// Mutation returns the TechStackMutation object of the builder.
func (tsu *TechStackUpdate) Mutation() *TechStackMutation {
	return tsu.mutation
}

// ClearTechnology clears all "technology" edges to the Technology entity.
func (tsu *TechStackUpdate) ClearTechnology() *TechStackUpdate {
	tsu.mutation.ClearTechnology()
	return tsu
}

// RemoveTechnologyIDs removes the "technology" edge to Technology entities by IDs.
func (tsu *TechStackUpdate) RemoveTechnologyIDs(ids ...int) *TechStackUpdate {
	tsu.mutation.RemoveTechnologyIDs(ids...)
	return tsu
}

// RemoveTechnology removes "technology" edges to Technology entities.
func (tsu *TechStackUpdate) RemoveTechnology(t ...*Technology) *TechStackUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsu.RemoveTechnologyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TechStackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TechStackMutation](ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TechStackUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TechStackUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TechStackUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsu *TechStackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(techstack.Table, techstack.Columns, sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Stack(); ok {
		_spec.SetField(techstack.FieldStack, field.TypeString, value)
	}
	if tsu.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.RemovedTechnologyIDs(); len(nodes) > 0 && !tsu.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{techstack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TechStackUpdateOne is the builder for updating a single TechStack entity.
type TechStackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TechStackMutation
}

// SetStack sets the "stack" field.
func (tsuo *TechStackUpdateOne) SetStack(s string) *TechStackUpdateOne {
	tsuo.mutation.SetStack(s)
	return tsuo
}

// AddTechnologyIDs adds the "technology" edge to the Technology entity by IDs.
func (tsuo *TechStackUpdateOne) AddTechnologyIDs(ids ...int) *TechStackUpdateOne {
	tsuo.mutation.AddTechnologyIDs(ids...)
	return tsuo
}

// AddTechnology adds the "technology" edges to the Technology entity.
func (tsuo *TechStackUpdateOne) AddTechnology(t ...*Technology) *TechStackUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.AddTechnologyIDs(ids...)
}

// Mutation returns the TechStackMutation object of the builder.
func (tsuo *TechStackUpdateOne) Mutation() *TechStackMutation {
	return tsuo.mutation
}

// ClearTechnology clears all "technology" edges to the Technology entity.
func (tsuo *TechStackUpdateOne) ClearTechnology() *TechStackUpdateOne {
	tsuo.mutation.ClearTechnology()
	return tsuo
}

// RemoveTechnologyIDs removes the "technology" edge to Technology entities by IDs.
func (tsuo *TechStackUpdateOne) RemoveTechnologyIDs(ids ...int) *TechStackUpdateOne {
	tsuo.mutation.RemoveTechnologyIDs(ids...)
	return tsuo
}

// RemoveTechnology removes "technology" edges to Technology entities.
func (tsuo *TechStackUpdateOne) RemoveTechnology(t ...*Technology) *TechStackUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tsuo.RemoveTechnologyIDs(ids...)
}

// Where appends a list predicates to the TechStackUpdate builder.
func (tsuo *TechStackUpdateOne) Where(ps ...predicate.TechStack) *TechStackUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TechStackUpdateOne) Select(field string, fields ...string) *TechStackUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TechStack entity.
func (tsuo *TechStackUpdateOne) Save(ctx context.Context) (*TechStack, error) {
	return withHooks[*TechStack, TechStackMutation](ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TechStackUpdateOne) SaveX(ctx context.Context) *TechStack {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TechStackUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TechStackUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tsuo *TechStackUpdateOne) sqlSave(ctx context.Context) (_node *TechStack, err error) {
	_spec := sqlgraph.NewUpdateSpec(techstack.Table, techstack.Columns, sqlgraph.NewFieldSpec(techstack.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TechStack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, techstack.FieldID)
		for _, f := range fields {
			if !techstack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != techstack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.Stack(); ok {
		_spec.SetField(techstack.FieldStack, field.TypeString, value)
	}
	if tsuo.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.RemovedTechnologyIDs(); len(nodes) > 0 && !tsuo.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   techstack.TechnologyTable,
			Columns: []string{techstack.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(technology.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TechStack{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{techstack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
