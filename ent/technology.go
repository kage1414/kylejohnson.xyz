// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kylejohnson-xyz/ent/technology"
	"kylejohnson-xyz/ent/techstack"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Technology is the model entity for the Technology schema.
type Technology struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int32 `json:"priority,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TechnologyQuery when eager-loading is set.
	Edges                 TechnologyEdges `json:"edges"`
	tech_stack_technology *uuid.UUID
	selectValues          sql.SelectValues
}

// TechnologyEdges holds the relations/edges for other nodes in the graph.
type TechnologyEdges struct {
	// Application holds the value of the application edge.
	Application []*Application `json:"application,omitempty"`
	// Stack holds the value of the stack edge.
	Stack *TechStack `json:"stack,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ApplicationOrErr returns the Application value or an error if the edge
// was not loaded in eager-loading.
func (e TechnologyEdges) ApplicationOrErr() ([]*Application, error) {
	if e.loadedTypes[0] {
		return e.Application, nil
	}
	return nil, &NotLoadedError{edge: "application"}
}

// StackOrErr returns the Stack value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechnologyEdges) StackOrErr() (*TechStack, error) {
	if e.loadedTypes[1] {
		if e.Stack == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: techstack.Label}
		}
		return e.Stack, nil
	}
	return nil, &NotLoadedError{edge: "stack"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Technology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case technology.FieldPriority:
			values[i] = new(sql.NullInt64)
		case technology.FieldName, technology.FieldURL:
			values[i] = new(sql.NullString)
		case technology.FieldID:
			values[i] = new(uuid.UUID)
		case technology.ForeignKeys[0]: // tech_stack_technology
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Technology fields.
func (t *Technology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case technology.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case technology.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case technology.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = value.String
			}
		case technology.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				t.Priority = int32(value.Int64)
			}
		case technology.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tech_stack_technology", values[i])
			} else if value.Valid {
				t.tech_stack_technology = new(uuid.UUID)
				*t.tech_stack_technology = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Technology.
// This includes values selected through modifiers, order, etc.
func (t *Technology) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryApplication queries the "application" edge of the Technology entity.
func (t *Technology) QueryApplication() *ApplicationQuery {
	return NewTechnologyClient(t.config).QueryApplication(t)
}

// QueryStack queries the "stack" edge of the Technology entity.
func (t *Technology) QueryStack() *TechStackQuery {
	return NewTechnologyClient(t.config).QueryStack(t)
}

// Update returns a builder for updating this Technology.
// Note that you need to call Technology.Unwrap() before calling this method if this Technology
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Technology) Update() *TechnologyUpdateOne {
	return NewTechnologyClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Technology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Technology) Unwrap() *Technology {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Technology is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Technology) String() string {
	var builder strings.Builder
	builder.WriteString("Technology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(t.URL)
	builder.WriteString(", ")
	builder.WriteString("priority=")
	builder.WriteString(fmt.Sprintf("%v", t.Priority))
	builder.WriteByte(')')
	return builder.String()
}

// Technologies is a parsable slice of Technology.
type Technologies []*Technology
